webpackHotUpdate("pritchard-electric",{

/***/ "./node_modules/clsx/dist/clsx.m.js":
/*!******************************************!*\
  !*** ./node_modules/clsx/dist/clsx.m.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction toVal(mix){var k,y,str='';if(typeof mix==='string'||typeof mix==='number'){str+=mix;}else if(typeof mix==='object'){if(Array.isArray(mix)){for(k=0;k<mix.length;k++){if(mix[k]){if(y=toVal(mix[k])){str&&(str+=' ');str+=y;}}}}else{for(k in mix){if(mix[k]){str&&(str+=' ');str+=k;}}}}return str;}/* harmony default export */ __webpack_exports__[\"default\"] = (function(){var i=0,tmp,x,str='';while(i<arguments.length){if(tmp=arguments[i++]){if(x=toVal(tmp)){str&&(str+=' ');str+=x;}}}return str;});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcz84YWU4Il0sIm5hbWVzIjpbInRvVmFsIiwibWl4IiwiayIsInkiLCJzdHIiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJpIiwidG1wIiwieCIsImFyZ3VtZW50cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxRQUFTQSxNQUFULENBQWVDLEdBQWYsQ0FBb0IsQ0FDbkIsR0FBSUMsRUFBSixDQUFPQyxDQUFQLENBQVVDLEdBQUcsQ0FBQyxFQUFkLENBRUEsR0FBSSxNQUFPSCxJQUFQLEdBQWUsUUFBZixFQUEyQixNQUFPQSxJQUFQLEdBQWUsUUFBOUMsQ0FBd0QsQ0FDdkRHLEdBQUcsRUFBSUgsR0FBUCxDQUNBLENBRkQsSUFFTyxJQUFJLE1BQU9BLElBQVAsR0FBZSxRQUFuQixDQUE2QixDQUNuQyxHQUFJSSxLQUFLLENBQUNDLE9BQU4sQ0FBY0wsR0FBZCxDQUFKLENBQXdCLENBQ3ZCLElBQUtDLENBQUMsQ0FBQyxDQUFQLENBQVVBLENBQUMsQ0FBR0QsR0FBRyxDQUFDTSxNQUFsQixDQUEwQkwsQ0FBQyxFQUEzQixDQUErQixDQUM5QixHQUFJRCxHQUFHLENBQUNDLENBQUQsQ0FBUCxDQUFZLENBQ1gsR0FBSUMsQ0FBQyxDQUFHSCxLQUFLLENBQUNDLEdBQUcsQ0FBQ0MsQ0FBRCxDQUFKLENBQWIsQ0FBdUIsQ0FDdEJFLEdBQUcsR0FBS0EsR0FBRyxFQUFJLEdBQVosQ0FBSCxDQUNBQSxHQUFHLEVBQUlELENBQVAsQ0FDQSxDQUNELENBQ0QsQ0FDRCxDQVRELElBU08sQ0FDTixJQUFLRCxDQUFMLEdBQVVELElBQVYsQ0FBZSxDQUNkLEdBQUlBLEdBQUcsQ0FBQ0MsQ0FBRCxDQUFQLENBQVksQ0FDWEUsR0FBRyxHQUFLQSxHQUFHLEVBQUksR0FBWixDQUFILENBQ0FBLEdBQUcsRUFBSUYsQ0FBUCxDQUNBLENBQ0QsQ0FDRCxDQUNELENBRUQsTUFBT0UsSUFBUCxDQUNBLENBRWMseUVBQVksQ0FDMUIsR0FBSUksRUFBQyxDQUFDLENBQU4sQ0FBU0MsR0FBVCxDQUFjQyxDQUFkLENBQWlCTixHQUFHLENBQUMsRUFBckIsQ0FDQSxNQUFPSSxDQUFDLENBQUdHLFNBQVMsQ0FBQ0osTUFBckIsQ0FBNkIsQ0FDNUIsR0FBSUUsR0FBRyxDQUFHRSxTQUFTLENBQUNILENBQUMsRUFBRixDQUFuQixDQUEwQixDQUN6QixHQUFJRSxDQUFDLENBQUdWLEtBQUssQ0FBQ1MsR0FBRCxDQUFiLENBQW9CLENBQ25CTCxHQUFHLEdBQUtBLEdBQUcsRUFBSSxHQUFaLENBQUgsQ0FDQUEsR0FBRyxFQUFJTSxDQUFQLENBQ0EsQ0FDRCxDQUNELENBQ0QsTUFBT04sSUFBUCxDQUNBLEMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/clsx/dist/clsx.m.js\n");

/***/ }),

/***/ "./node_modules/lodash.debounce/index.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash.debounce/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ /** Used as the `TypeError` message for \"Functions\" methods. */var FUNC_ERROR_TEXT='Expected a function';/** Used as references for various `Number` constants. */var NAN=0/0;/** `Object#toString` result references. */var symbolTag='[object Symbol]';/** Used to match leading and trailing whitespace. */var reTrim=/^\\s+|\\s+$/g;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Built-in method references without a dependency on `root`. */var freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Used for built-in method references. */var objectProto=Object.prototype;/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */var objectToString=objectProto.toString;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeMax=Math.max,nativeMin=Math.min;/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */var now=function now(){return root.Date.now();};/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.\nlastInvokeTime=time;// Start the timer for the trailing edge.\ntimerId=setTimeout(timerExpired,wait);// Invoke the leading edge.\nreturn leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,result=wait-timeSinceLastCall;return maxing?nativeMin(result,maxWait-timeSinceLastInvoke):result;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the\n// trailing edge, the system time has gone backwards and we're treating\n// it as the trailing edge, or we've hit the `maxWait` limit.\nreturn lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.\ntimerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been\n// debounced at least once.\nif(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.\ntimerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */function isObject(value){var type=typeof value;return!!value&&(type=='object'||type=='function');}/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */function isObjectLike(value){return!!value&&typeof value=='object';}/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */function isSymbol(value){return typeof value=='symbol'||isObjectLike(value)&&objectToString.call(value)==symbolTag;}/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=value.replace(reTrim,'');var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}module.exports=debounce;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.debounce/index.js\n");

/***/ }),

/***/ "./node_modules/lodash.isequal/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash.isequal/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ /** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER=9007199254740991;/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',promiseTag='[object Promise]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */var reRegExpChar=/[\\\\^$.*+?()[\\]{}|]/g;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\\[object .+?Constructor\\]$/;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\\d*)$/;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports= true&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&typeof module=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */function baseUnary(func){return function(value){return func(value);};}/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */function cacheHas(cache,key){return cache.has(key);}/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */function getValue(object,key){return object==null?undefined:object[key];}/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=root['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */var nativeObjectToString=objectProto.toString;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?root.Buffer:undefined,Symbol=root.Symbol,Uint8Array=root.Uint8Array,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,symToStringTag=Symbol?Symbol.toStringTag:undefined;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,nativeKeys=overArg(Object.keys,Object);/* Built-in method references that are verified to be native. */var DataView=getNative(root,'DataView'),Map=getNative(root,'Map'),Promise=getNative(root,'Promise'),Set=getNative(root,'Set'),WeakMap=getNative(root,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=Symbol?Symbol.prototype:undefined,symbolValueOf=symbolProto?symbolProto.valueOf:undefined;/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(data,key)?data[key]:undefined;}/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);}/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.\nHash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */function listCacheClear(){this.__data__=[];this.size=0;}/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}--this.size;return true;}/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined:data[index][1];}/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else{data[index][1]=value;}return this;}// Add methods to `ListCache`.\nListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */function mapCacheGet(key){return getMapData(this,key).get(key);}/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */function mapCacheHas(key){return getMapData(this,key).has(key);}/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.\nMapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */function setCacheHas(value){return this.__data__.has(value);}// Add methods to `SetCache`.\nSetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */function stackClear(){this.__data__=new ListCache();this.size=0;}/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */function stackGet(key){return this.__data__.get(key);}/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */function stackHas(key){return this.__data__.has(key);}/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.\nStack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.\nkey=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.\nisBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.\nisType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.\nisIndex(key,length)))){result.push(key);}}return result;}/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return-1;}/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Assume cyclic values are equal.\nvar stacked=stack.get(array);if(stacked&&stack.get(other)){return stacked==other;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.\nwhile(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).\nif(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.\n// Invalid dates are coerced to `NaN`.\nreturn eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,\n// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n// for more details.\nreturn object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.\nvar stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).\nstack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Assume cyclic values are equal.\nvar stacked=stack.get(object);if(stacked&&stack.get(other)){return stacked==other;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).\nif(!(compared===undefined?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.\nif(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined;}/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else{delete value[symToStringTag];}}return result;}/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return[];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */function isIndex(value,length){length=length==null?MAX_SAFE_INTEGER:length;return!!length&&(typeof value=='number'||reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */function isKeyable(value){var type=typeof value;return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */function isMasked(func){return!!maskSrcKey&&maskSrcKey in func;}/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */function objectToString(value){return nativeObjectToString.call(value);}/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return'';}/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */function eq(value,other){return value===other||value!==value&&other!==other;}/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */var isArray=Array.isArray;/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */var isBuffer=nativeIsBuffer||stubFalse;/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */function isEqual(value,other){return baseIsEqual(value,other);}/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator\n// in Safari 9 which returns 'object' for typed arrays and other constructors.\nvar tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */function isObject(value){var type=typeof value;return value!=null&&(type=='object'||type=='function');}/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */function isObjectLike(value){return value!=null&&typeof value=='object';}/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */function stubArray(){return[];}/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */function stubFalse(){return false;}module.exports=isEqual;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.isequal/index.js\n");

/***/ }),

/***/ "./node_modules/lodash.throttle/index.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash.throttle/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ /** Used as the `TypeError` message for \"Functions\" methods. */var FUNC_ERROR_TEXT='Expected a function';/** Used as references for various `Number` constants. */var NAN=0/0;/** `Object#toString` result references. */var symbolTag='[object Symbol]';/** Used to match leading and trailing whitespace. */var reTrim=/^\\s+|\\s+$/g;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Built-in method references without a dependency on `root`. */var freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Used for built-in method references. */var objectProto=Object.prototype;/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */var objectToString=objectProto.toString;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeMax=Math.max,nativeMin=Math.min;/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */var now=function now(){return root.Date.now();};/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.\nlastInvokeTime=time;// Start the timer for the trailing edge.\ntimerId=setTimeout(timerExpired,wait);// Invoke the leading edge.\nreturn leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,result=wait-timeSinceLastCall;return maxing?nativeMin(result,maxWait-timeSinceLastInvoke):result;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the\n// trailing edge, the system time has gone backwards and we're treating\n// it as the trailing edge, or we've hit the `maxWait` limit.\nreturn lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.\ntimerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been\n// debounced at least once.\nif(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.\ntimerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */function isObject(value){var type=typeof value;return!!value&&(type=='object'||type=='function');}/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */function isObjectLike(value){return!!value&&typeof value=='object';}/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */function isSymbol(value){return typeof value=='symbol'||isObjectLike(value)&&objectToString.call(value)==symbolTag;}/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=value.replace(reTrim,'');var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}module.exports=throttle;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.throttle/index.js\n");

/***/ }),

/***/ "./node_modules/react-image-gallery/build/SVG.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-image-gallery/build/SVG.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports,\"__esModule\",{value:true});var _react=__webpack_require__(/*! react */ \"./node_modules/react/index.js\");var _react2=_interopRequireDefault(_react);var _propTypes=__webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var left=_react2.default.createElement('polyline',{points:'15 18 9 12 15 6'});var right=_react2.default.createElement('polyline',{points:'9 18 15 12 9 6'});var maximize=_react2.default.createElement('path',{d:'M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3'});var minimize=_react2.default.createElement('path',{d:'M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3'});var play=_react2.default.createElement('polygon',{points:'5 3 19 12 5 21 5 3'});var pause=_react2.default.createElement(_react2.default.Fragment,null,_react2.default.createElement('rect',{x:'6',y:'4',width:'4',height:'16'}),_react2.default.createElement('rect',{x:'14',y:'4',width:'4',height:'16'}));var iconMapper={left:left,right:right,maximize:maximize,minimize:minimize,play:play,pause:pause};var SVG=function SVG(props){var strokeWidth=props.strokeWidth,viewBox=props.viewBox,icon=props.icon;return _react2.default.createElement('svg',{className:'image-gallery-svg',xmlns:'http://www.w3.org/2000/svg',viewBox:viewBox,fill:'none',stroke:'currentColor',strokeWidth:strokeWidth,strokeLinecap:'round',strokeLinejoin:'round'},iconMapper[icon]);};SVG.propTypes={strokeWidth:_propTypes.number,viewBox:_propTypes.string,icon:(0,_propTypes.oneOf)(['left','right','maximize','minimize','play','pause']).isRequired};SVG.defaultProps={strokeWidth:1,viewBox:'0 0 24 24'};exports.default=SVG;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW1hZ2UtZ2FsbGVyeS9idWlsZC9TVkcuanM/N2FjYyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsInJlcXVpcmUiLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wcm9wVHlwZXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImxlZnQiLCJjcmVhdGVFbGVtZW50IiwicG9pbnRzIiwicmlnaHQiLCJtYXhpbWl6ZSIsImQiLCJtaW5pbWl6ZSIsInBsYXkiLCJwYXVzZSIsIkZyYWdtZW50IiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImljb25NYXBwZXIiLCJTVkciLCJwcm9wcyIsInN0cm9rZVdpZHRoIiwidmlld0JveCIsImljb24iLCJjbGFzc05hbWUiLCJ4bWxucyIsImZpbGwiLCJzdHJva2UiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlTGluZWpvaW4iLCJwcm9wVHlwZXMiLCJudW1iZXIiLCJzdHJpbmciLCJvbmVPZiIsImlzUmVxdWlyZWQiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiJBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLENBQStCLFlBQS9CLENBQTZDLENBQzNDQyxLQUFLLENBQUUsSUFEb0MsQ0FBN0MsRUFJQSxHQUFJQyxPQUFNLENBQUdDLG1CQUFPLENBQUMsNENBQUQsQ0FBcEIsQ0FFQSxHQUFJQyxRQUFPLENBQUdDLHNCQUFzQixDQUFDSCxNQUFELENBQXBDLENBRUEsR0FBSUksV0FBVSxDQUFHSCxtQkFBTyxDQUFDLHNEQUFELENBQXhCLENBRUEsUUFBU0UsdUJBQVQsQ0FBZ0NFLEdBQWhDLENBQXFDLENBQUUsTUFBT0EsSUFBRyxFQUFJQSxHQUFHLENBQUNDLFVBQVgsQ0FBd0JELEdBQXhCLENBQThCLENBQUVFLE9BQU8sQ0FBRUYsR0FBWCxDQUFyQyxDQUF3RCxDQUUvRixHQUFJRyxLQUFJLENBQUdOLE9BQU8sQ0FBQ0ssT0FBUixDQUFnQkUsYUFBaEIsQ0FBOEIsVUFBOUIsQ0FBMEMsQ0FBRUMsTUFBTSxDQUFFLGlCQUFWLENBQTFDLENBQVgsQ0FDQSxHQUFJQyxNQUFLLENBQUdULE9BQU8sQ0FBQ0ssT0FBUixDQUFnQkUsYUFBaEIsQ0FBOEIsVUFBOUIsQ0FBMEMsQ0FBRUMsTUFBTSxDQUFFLGdCQUFWLENBQTFDLENBQVosQ0FDQSxHQUFJRSxTQUFRLENBQUdWLE9BQU8sQ0FBQ0ssT0FBUixDQUFnQkUsYUFBaEIsQ0FBOEIsTUFBOUIsQ0FBc0MsQ0FBRUksQ0FBQyxDQUFFLCtGQUFMLENBQXRDLENBQWYsQ0FDQSxHQUFJQyxTQUFRLENBQUdaLE9BQU8sQ0FBQ0ssT0FBUixDQUFnQkUsYUFBaEIsQ0FBOEIsTUFBOUIsQ0FBc0MsQ0FBRUksQ0FBQyxDQUFFLCtGQUFMLENBQXRDLENBQWYsQ0FDQSxHQUFJRSxLQUFJLENBQUdiLE9BQU8sQ0FBQ0ssT0FBUixDQUFnQkUsYUFBaEIsQ0FBOEIsU0FBOUIsQ0FBeUMsQ0FBRUMsTUFBTSxDQUFFLG9CQUFWLENBQXpDLENBQVgsQ0FDQSxHQUFJTSxNQUFLLENBQUdkLE9BQU8sQ0FBQ0ssT0FBUixDQUFnQkUsYUFBaEIsQ0FDVlAsT0FBTyxDQUFDSyxPQUFSLENBQWdCVSxRQUROLENBRVYsSUFGVSxDQUdWZixPQUFPLENBQUNLLE9BQVIsQ0FBZ0JFLGFBQWhCLENBQThCLE1BQTlCLENBQXNDLENBQUVTLENBQUMsQ0FBRSxHQUFMLENBQVVDLENBQUMsQ0FBRSxHQUFiLENBQWtCQyxLQUFLLENBQUUsR0FBekIsQ0FBOEJDLE1BQU0sQ0FBRSxJQUF0QyxDQUF0QyxDQUhVLENBSVZuQixPQUFPLENBQUNLLE9BQVIsQ0FBZ0JFLGFBQWhCLENBQThCLE1BQTlCLENBQXNDLENBQUVTLENBQUMsQ0FBRSxJQUFMLENBQVdDLENBQUMsQ0FBRSxHQUFkLENBQW1CQyxLQUFLLENBQUUsR0FBMUIsQ0FBK0JDLE1BQU0sQ0FBRSxJQUF2QyxDQUF0QyxDQUpVLENBQVosQ0FPQSxHQUFJQyxXQUFVLENBQUcsQ0FDZmQsSUFBSSxDQUFFQSxJQURTLENBRWZHLEtBQUssQ0FBRUEsS0FGUSxDQUdmQyxRQUFRLENBQUVBLFFBSEssQ0FJZkUsUUFBUSxDQUFFQSxRQUpLLENBS2ZDLElBQUksQ0FBRUEsSUFMUyxDQU1mQyxLQUFLLENBQUVBLEtBTlEsQ0FBakIsQ0FTQSxHQUFJTyxJQUFHLENBQUcsUUFBU0EsSUFBVCxDQUFhQyxLQUFiLENBQW9CLENBQzVCLEdBQUlDLFlBQVcsQ0FBR0QsS0FBSyxDQUFDQyxXQUF4QixDQUNJQyxPQUFPLENBQUdGLEtBQUssQ0FBQ0UsT0FEcEIsQ0FFSUMsSUFBSSxDQUFHSCxLQUFLLENBQUNHLElBRmpCLENBSUEsTUFBT3pCLFFBQU8sQ0FBQ0ssT0FBUixDQUFnQkUsYUFBaEIsQ0FDTCxLQURLLENBRUwsQ0FDRW1CLFNBQVMsQ0FBRSxtQkFEYixDQUVFQyxLQUFLLENBQUUsNEJBRlQsQ0FHRUgsT0FBTyxDQUFFQSxPQUhYLENBSUVJLElBQUksQ0FBRSxNQUpSLENBS0VDLE1BQU0sQ0FBRSxjQUxWLENBTUVOLFdBQVcsQ0FBRUEsV0FOZixDQU9FTyxhQUFhLENBQUUsT0FQakIsQ0FRRUMsY0FBYyxDQUFFLE9BUmxCLENBRkssQ0FZTFgsVUFBVSxDQUFDSyxJQUFELENBWkwsQ0FBUCxDQWNELENBbkJELENBcUJBSixHQUFHLENBQUNXLFNBQUosQ0FBZ0IsQ0FDZFQsV0FBVyxDQUFFckIsVUFBVSxDQUFDK0IsTUFEVixDQUVkVCxPQUFPLENBQUV0QixVQUFVLENBQUNnQyxNQUZOLENBR2RULElBQUksQ0FBRSxDQUFDLEVBQUd2QixVQUFVLENBQUNpQyxLQUFmLEVBQXNCLENBQUMsTUFBRCxDQUFTLE9BQVQsQ0FBa0IsVUFBbEIsQ0FBOEIsVUFBOUIsQ0FBMEMsTUFBMUMsQ0FBa0QsT0FBbEQsQ0FBdEIsRUFBa0ZDLFVBSDFFLENBQWhCLENBTUFmLEdBQUcsQ0FBQ2dCLFlBQUosQ0FBbUIsQ0FDakJkLFdBQVcsQ0FBRSxDQURJLENBRWpCQyxPQUFPLENBQUUsV0FGUSxDQUFuQixDQUtBNUIsT0FBTyxDQUFDUyxPQUFSLENBQWtCZ0IsR0FBbEIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtaW1hZ2UtZ2FsbGVyeS9idWlsZC9TVkcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBsZWZ0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BvbHlsaW5lJywgeyBwb2ludHM6ICcxNSAxOCA5IDEyIDE1IDYnIH0pO1xudmFyIHJpZ2h0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BvbHlsaW5lJywgeyBwb2ludHM6ICc5IDE4IDE1IDEyIDkgNicgfSk7XG52YXIgbWF4aW1pemUgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ004IDNINWEyIDIgMCAwIDAtMiAydjNtMTggMFY1YTIgMiAwIDAgMC0yLTJoLTNtMCAxOGgzYTIgMiAwIDAgMCAyLTJ2LTNNMyAxNnYzYTIgMiAwIDAgMCAyIDJoMycgfSk7XG52YXIgbWluaW1pemUgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ004IDN2M2EyIDIgMCAwIDEtMiAySDNtMTggMGgtM2EyIDIgMCAwIDEtMi0yVjNtMCAxOHYtM2EyIDIgMCAwIDEgMi0yaDNNMyAxNmgzYTIgMiAwIDAgMSAyIDJ2MycgfSk7XG52YXIgcGxheSA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwb2x5Z29uJywgeyBwb2ludHM6ICc1IDMgMTkgMTIgNSAyMSA1IDMnIH0pO1xudmFyIHBhdXNlID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gIF9yZWFjdDIuZGVmYXVsdC5GcmFnbWVudCxcbiAgbnVsbCxcbiAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3JlY3QnLCB7IHg6ICc2JywgeTogJzQnLCB3aWR0aDogJzQnLCBoZWlnaHQ6ICcxNicgfSksXG4gIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdyZWN0JywgeyB4OiAnMTQnLCB5OiAnNCcsIHdpZHRoOiAnNCcsIGhlaWdodDogJzE2JyB9KVxuKTtcblxudmFyIGljb25NYXBwZXIgPSB7XG4gIGxlZnQ6IGxlZnQsXG4gIHJpZ2h0OiByaWdodCxcbiAgbWF4aW1pemU6IG1heGltaXplLFxuICBtaW5pbWl6ZTogbWluaW1pemUsXG4gIHBsYXk6IHBsYXksXG4gIHBhdXNlOiBwYXVzZVxufTtcblxudmFyIFNWRyA9IGZ1bmN0aW9uIFNWRyhwcm9wcykge1xuICB2YXIgc3Ryb2tlV2lkdGggPSBwcm9wcy5zdHJva2VXaWR0aCxcbiAgICAgIHZpZXdCb3ggPSBwcm9wcy52aWV3Qm94LFxuICAgICAgaWNvbiA9IHByb3BzLmljb247XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdzdmcnLFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogJ2ltYWdlLWdhbGxlcnktc3ZnJyxcbiAgICAgIHhtbG5zOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICAgICAgdmlld0JveDogdmlld0JveCxcbiAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgIHN0cm9rZTogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBzdHJva2VXaWR0aDogc3Ryb2tlV2lkdGgsXG4gICAgICBzdHJva2VMaW5lY2FwOiAncm91bmQnLFxuICAgICAgc3Ryb2tlTGluZWpvaW46ICdyb3VuZCdcbiAgICB9LFxuICAgIGljb25NYXBwZXJbaWNvbl1cbiAgKTtcbn07XG5cblNWRy5wcm9wVHlwZXMgPSB7XG4gIHN0cm9rZVdpZHRoOiBfcHJvcFR5cGVzLm51bWJlcixcbiAgdmlld0JveDogX3Byb3BUeXBlcy5zdHJpbmcsXG4gIGljb246ICgwLCBfcHJvcFR5cGVzLm9uZU9mKShbJ2xlZnQnLCAncmlnaHQnLCAnbWF4aW1pemUnLCAnbWluaW1pemUnLCAncGxheScsICdwYXVzZSddKS5pc1JlcXVpcmVkXG59O1xuXG5TVkcuZGVmYXVsdFByb3BzID0ge1xuICBzdHJva2VXaWR0aDogMSxcbiAgdmlld0JveDogJzAgMCAyNCAyNCdcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNWRzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-image-gallery/build/SVG.js\n");

/***/ }),

/***/ "./node_modules/react-image-gallery/build/image-gallery.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-image-gallery/build/image-gallery.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports,\"__esModule\",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _clsx=__webpack_require__(/*! clsx */ \"./node_modules/clsx/dist/clsx.m.js\");var _clsx2=_interopRequireDefault(_clsx);var _react=__webpack_require__(/*! react */ \"./node_modules/react/index.js\");var _react2=_interopRequireDefault(_react);var _reactSwipeable=__webpack_require__(/*! react-swipeable */ \"./node_modules/react-swipeable/es/index.js\");var _lodash=__webpack_require__(/*! lodash.throttle */ \"./node_modules/lodash.throttle/index.js\");var _lodash2=_interopRequireDefault(_lodash);var _lodash3=__webpack_require__(/*! lodash.debounce */ \"./node_modules/lodash.debounce/index.js\");var _lodash4=_interopRequireDefault(_lodash3);var _lodash5=__webpack_require__(/*! lodash.isequal */ \"./node_modules/lodash.isequal/index.js\");var _lodash6=_interopRequireDefault(_lodash5);var _resizeObserverPolyfill=__webpack_require__(/*! resize-observer-polyfill */ \"./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\");var _resizeObserverPolyfill2=_interopRequireDefault(_resizeObserverPolyfill);var _propTypes=__webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");var _SVG=__webpack_require__(/*! ./SVG */ \"./node_modules/react-image-gallery/build/SVG.js\");var _SVG2=_interopRequireDefault(_SVG);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var screenChangeEvents=['fullscreenchange','MSFullscreenChange','mozfullscreenchange','webkitfullscreenchange'];var imageSetType=(0,_propTypes.arrayOf)((0,_propTypes.shape)({srcSet:_propTypes.string,media:_propTypes.string}));function isEnterOrSpaceKey(event){var key=parseInt(event.keyCode||event.which||0,10);var ENTER_KEY_CODE=66;var SPACEBAR_KEY_CODE=62;return key===ENTER_KEY_CODE||key===SPACEBAR_KEY_CODE;}var ImageGallery=function(_React$Component){_inherits(ImageGallery,_React$Component);function ImageGallery(props){_classCallCheck(this,ImageGallery);var _this=_possibleConstructorReturn(this,(ImageGallery.__proto__||Object.getPrototypeOf(ImageGallery)).call(this,props));_this.state={currentIndex:props.startIndex,thumbsTranslate:0,currentSlideOffset:0,galleryWidth:0,thumbnailsWrapperWidth:0,thumbnailsWrapperHeight:0,isFullscreen:false,isPlaying:false};_this.loadedImages={};_this.imageGallery=_react2.default.createRef();_this.thumbnailsWrapper=_react2.default.createRef();_this.thumbnails=_react2.default.createRef();_this.imageGallerySlideWrapper=_react2.default.createRef();// bindings\n_this.handleKeyDown=_this.handleKeyDown.bind(_this);_this.handleMouseDown=_this.handleMouseDown.bind(_this);_this.handleOnSwiped=_this.handleOnSwiped.bind(_this);_this.handleScreenChange=_this.handleScreenChange.bind(_this);_this.handleSwiping=_this.handleSwiping.bind(_this);_this.onThumbnailMouseLeave=_this.onThumbnailMouseLeave.bind(_this);_this.handleImageError=_this.handleImageError.bind(_this);_this.pauseOrPlay=_this.pauseOrPlay.bind(_this);_this.renderThumbInner=_this.renderThumbInner.bind(_this);_this.renderItem=_this.renderItem.bind(_this);_this.slideLeft=_this.slideLeft.bind(_this);_this.slideRight=_this.slideRight.bind(_this);_this.toggleFullScreen=_this.toggleFullScreen.bind(_this);_this.togglePlay=_this.togglePlay.bind(_this);// Used to update the throttle if slideDuration changes\n_this.unthrottledSlideToIndex=_this.slideToIndex;_this.slideToIndex=(0,_lodash2.default)(_this.unthrottledSlideToIndex,props.slideDuration,{trailing:false});if(props.lazyLoad){_this.lazyLoaded=[];}return _this;}_createClass(ImageGallery,[{key:'componentDidMount',value:function componentDidMount(){var _props=this.props,autoPlay=_props.autoPlay,useWindowKeyDown=_props.useWindowKeyDown;if(autoPlay){this.play();}if(useWindowKeyDown){window.addEventListener('keydown',this.handleKeyDown);}else{this.imageGallery.current.addEventListener('keydown',this.handleKeyDown);}window.addEventListener('mousedown',this.handleMouseDown);this.initResizeObserver(this.imageGallerySlideWrapper);this.addScreenChangeEvent();}},{key:'componentDidUpdate',value:function componentDidUpdate(prevProps,prevState){var _props2=this.props,items=_props2.items,lazyLoad=_props2.lazyLoad,slideDuration=_props2.slideDuration,startIndex=_props2.startIndex,thumbnailPosition=_props2.thumbnailPosition,showThumbnails=_props2.showThumbnails,useWindowKeyDown=_props2.useWindowKeyDown;var currentIndex=this.state.currentIndex;var itemsSizeChanged=prevProps.items.length!==items.length;var itemsChanged=!(0,_lodash6.default)(prevProps.items,items);var startIndexUpdated=prevProps.startIndex!==startIndex;var thumbnailsPositionChanged=prevProps.thumbnailPosition!==thumbnailPosition;var showThumbnailsChanged=prevProps.showThumbnails!==showThumbnails;if(thumbnailsPositionChanged){// re-initialize resizeObserver because slides was unmounted and mounted again\nthis.removeResizeObserver();this.initResizeObserver(this.imageGallerySlideWrapper);}if(itemsSizeChanged||showThumbnailsChanged){this.handleResize();}if(prevState.currentIndex!==currentIndex){this.slideThumbnailBar(prevState.currentIndex);}// if slideDuration changes, update slideToIndex throttle\nif(prevProps.slideDuration!==slideDuration){this.slideToIndex=(0,_lodash2.default)(this.unthrottledSlideToIndex,slideDuration,{trailing:false});}if(lazyLoad&&(!prevProps.lazyLoad||itemsChanged)){this.lazyLoaded=[];}if(useWindowKeyDown!==prevProps.useWindowKeyDown){if(useWindowKeyDown){this.imageGallery.current.removeEventListener('keydown',this.handleKeyDown);window.addEventListener('keydown',this.handleKeyDown);}else{window.removeEventListener('keydown',this.handleKeyDown);this.imageGallery.current.addEventListener('keydown',this.handleKeyDown);}}if(startIndexUpdated||itemsChanged){// TODO: this should be fix/removed if all it is doing\n// is resetting the gallery currentIndext state\nthis.setState({currentIndex:startIndex});}}},{key:'componentWillUnmount',value:function componentWillUnmount(){var useWindowKeyDown=this.props.useWindowKeyDown;window.removeEventListener('mousedown',this.handleMouseDown);this.removeScreenChangeEvent();this.removeResizeObserver();if(this.playPauseIntervalId){window.clearInterval(this.playPauseIntervalId);this.playPauseIntervalId=null;}if(this.transitionTimer){window.clearTimeout(this.transitionTimer);}if(useWindowKeyDown){window.removeEventListener('keydown',this.handleKeyDown);}else{this.imageGallery.current.removeEventListener('keydown',this.handleKeyDown);}}},{key:'onSliding',value:function onSliding(){var _this2=this;var _state=this.state,currentIndex=_state.currentIndex,isTransitioning=_state.isTransitioning;var _props3=this.props,onSlide=_props3.onSlide,slideDuration=_props3.slideDuration;this.transitionTimer=window.setTimeout(function(){if(isTransitioning){_this2.setState({isTransitioning:!isTransitioning});if(onSlide){onSlide(currentIndex);}}},slideDuration+50);}},{key:'onThumbnailClick',value:function onThumbnailClick(event,index){var onThumbnailClick=this.props.onThumbnailClick;this.slideToIndex(index,event);if(onThumbnailClick){onThumbnailClick(event,index);}}},{key:'onThumbnailMouseOver',value:function onThumbnailMouseOver(event,index){var _this3=this;if(this.thumbnailMouseOverTimer){window.clearTimeout(this.thumbnailMouseOverTimer);this.thumbnailMouseOverTimer=null;}this.thumbnailMouseOverTimer=window.setTimeout(function(){_this3.slideToIndex(index);_this3.pause();},300);}},{key:'onThumbnailMouseLeave',value:function onThumbnailMouseLeave(){if(this.thumbnailMouseOverTimer){var autoPlay=this.props.autoPlay;window.clearTimeout(this.thumbnailMouseOverTimer);this.thumbnailMouseOverTimer=null;if(autoPlay){this.play();}}}},{key:'setScrollDirection',value:function setScrollDirection(dir){var _state2=this.state,scrollingUpDown=_state2.scrollingUpDown,scrollingLeftRight=_state2.scrollingLeftRight;if(!scrollingUpDown&&!scrollingLeftRight){if(dir===_reactSwipeable.LEFT||dir===_reactSwipeable.RIGHT){this.setState({scrollingLeftRight:true});}else{this.setState({scrollingUpDown:true});}}}},{key:'setThumbsTranslate',value:function setThumbsTranslate(thumbsTranslate){this.setState({thumbsTranslate:thumbsTranslate});}},{key:'setModalFullscreen',value:function setModalFullscreen(state){var onScreenChange=this.props.onScreenChange;this.setState({modalFullscreen:state});// manually call because browser does not support screenchange events\nif(onScreenChange){onScreenChange(state);}}},{key:'getThumbsTranslate',value:function getThumbsTranslate(indexDifference){var _props4=this.props,disableThumbnailScroll=_props4.disableThumbnailScroll,items=_props4.items;var _state3=this.state,thumbnailsWrapperWidth=_state3.thumbnailsWrapperWidth,thumbnailsWrapperHeight=_state3.thumbnailsWrapperHeight;var totalScroll=void 0;var thumbElement=this.thumbnails&&this.thumbnails.current;if(disableThumbnailScroll)return 0;if(thumbElement){// total scroll required to see the last thumbnail\nif(this.isThumbnailVertical()){if(thumbElement.scrollHeight<=thumbnailsWrapperHeight){return 0;}totalScroll=thumbElement.scrollHeight-thumbnailsWrapperHeight;}else{if(thumbElement.scrollWidth<=thumbnailsWrapperWidth||thumbnailsWrapperWidth<=0){return 0;}totalScroll=thumbElement.scrollWidth-thumbnailsWrapperWidth;}// scroll-x required per index change\nvar perIndexScroll=totalScroll/(items.length-1);return indexDifference*perIndexScroll;}return 0;}},{key:'getAlignmentClassName',value:function getAlignmentClassName(index){// Necessary for lazing loading\nvar currentIndex=this.state.currentIndex;var _props5=this.props,infinite=_props5.infinite,items=_props5.items;var alignment='';var leftClassName='left';var centerClassName='center';var rightClassName='right';switch(index){case currentIndex-1:alignment=' '+leftClassName;break;case currentIndex:alignment=' '+centerClassName;break;case currentIndex+1:alignment=' '+rightClassName;break;default:break;}if(items.length>=3&&infinite){if(index===0&&currentIndex===items.length-1){// set first slide as right slide if were sliding right from last slide\nalignment=' '+rightClassName;}else if(index===items.length-1&&currentIndex===0){// set last slide as left slide if were sliding left from first slide\nalignment=' '+leftClassName;}}return alignment;}},{key:'getTranslateXForTwoSlide',value:function getTranslateXForTwoSlide(index){// For taking care of infinite swipe when there are only two slides\nvar _state4=this.state,currentIndex=_state4.currentIndex,currentSlideOffset=_state4.currentSlideOffset,previousIndex=_state4.previousIndex;var indexChanged=currentIndex!==previousIndex;var firstSlideWasPrevSlide=index===0&&previousIndex===0;var secondSlideWasPrevSlide=index===1&&previousIndex===1;var firstSlideIsNextSlide=index===0&&currentIndex===1;var secondSlideIsNextSlide=index===1&&currentIndex===0;var swipingEnded=currentSlideOffset===0;var baseTranslateX=-100*currentIndex;var translateX=baseTranslateX+index*100+currentSlideOffset;// keep track of user swiping direction\n// important to understand how to translateX based on last direction\nif(currentSlideOffset>0){this.direction='left';}else if(currentSlideOffset<0){this.direction='right';}// when swiping between two slides make sure the next and prev slides\n// are on both left and right\nif(secondSlideIsNextSlide&&currentSlideOffset>0){// swiping right\ntranslateX=-100+currentSlideOffset;}if(firstSlideIsNextSlide&&currentSlideOffset<0){// swiping left\ntranslateX=100+currentSlideOffset;}if(indexChanged){// when indexChanged move the slide to the correct side\nif(firstSlideWasPrevSlide&&swipingEnded&&this.direction==='left'){translateX=100;}else if(secondSlideWasPrevSlide&&swipingEnded&&this.direction==='right'){translateX=-100;}}else{// keep the slide on the correct side if the swipe was not successful\nif(secondSlideIsNextSlide&&swipingEnded&&this.direction==='left'){translateX=-100;}if(firstSlideIsNextSlide&&swipingEnded&&this.direction==='right'){translateX=100;}}return translateX;}},{key:'getThumbnailBarHeight',value:function getThumbnailBarHeight(){if(this.isThumbnailVertical()){var gallerySlideWrapperHeight=this.state.gallerySlideWrapperHeight;return{height:gallerySlideWrapperHeight};}return{};}},{key:'getSlideStyle',value:function getSlideStyle(index){var _state5=this.state,currentIndex=_state5.currentIndex,currentSlideOffset=_state5.currentSlideOffset,slideStyle=_state5.slideStyle;var _props6=this.props,infinite=_props6.infinite,items=_props6.items,useTranslate3D=_props6.useTranslate3D,isRTL=_props6.isRTL;var baseTranslateX=-100*currentIndex;var totalSlides=items.length-1;// calculates where the other slides belong based on currentIndex\n// if it is RTL the base line should be reversed\nvar translateX=(baseTranslateX+index*100)*(isRTL?-1:1)+currentSlideOffset;if(infinite&&items.length>2){if(currentIndex===0&&index===totalSlides){// make the last slide the slide before the first\n// if it is RTL the base line should be reversed\ntranslateX=-100*(isRTL?-1:1)+currentSlideOffset;}else if(currentIndex===totalSlides&&index===0){// make the first slide the slide after the last\n// if it is RTL the base line should be reversed\ntranslateX=100*(isRTL?-1:1)+currentSlideOffset;}}// Special case when there are only 2 items with infinite on\nif(infinite&&items.length===2){translateX=this.getTranslateXForTwoSlide(index);}var translate='translate('+translateX+'%, 0)';if(useTranslate3D){translate='translate3d('+translateX+'%, 0, 0)';}return _extends({},{WebkitTransform:translate,MozTransform:translate,msTransform:translate,OTransform:translate,transform:translate},slideStyle);}},{key:'getCurrentIndex',value:function getCurrentIndex(){var currentIndex=this.state.currentIndex;return currentIndex;}},{key:'getThumbnailStyle',value:function getThumbnailStyle(){var translate=void 0;var _props7=this.props,useTranslate3D=_props7.useTranslate3D,isRTL=_props7.isRTL;var thumbsTranslate=this.state.thumbsTranslate;var verticalTranslateValue=isRTL?thumbsTranslate*-1:thumbsTranslate;if(this.isThumbnailVertical()){translate='translate(0, '+thumbsTranslate+'px)';if(useTranslate3D){translate='translate3d(0, '+thumbsTranslate+'px, 0)';}}else{translate='translate('+verticalTranslateValue+'px, 0)';if(useTranslate3D){translate='translate3d('+verticalTranslateValue+'px, 0, 0)';}}return{WebkitTransform:translate,MozTransform:translate,msTransform:translate,OTransform:translate,transform:translate};}},{key:'getSlideItems',value:function getSlideItems(){var _this4=this;var currentIndex=this.state.currentIndex;var _props8=this.props,infinite=_props8.infinite,items=_props8.items,slideOnThumbnailOver=_props8.slideOnThumbnailOver,onClick=_props8.onClick,lazyLoad=_props8.lazyLoad,onTouchMove=_props8.onTouchMove,onTouchEnd=_props8.onTouchEnd,onTouchStart=_props8.onTouchStart,onMouseOver=_props8.onMouseOver,onMouseLeave=_props8.onMouseLeave,renderItem=_props8.renderItem,renderThumbInner=_props8.renderThumbInner,showThumbnails=_props8.showThumbnails,showBullets=_props8.showBullets;var slides=[];var thumbnails=[];var bullets=[];items.forEach(function(item,index){var alignment=_this4.getAlignmentClassName(index);var originalClass=item.originalClass?' '+item.originalClass:'';var thumbnailClass=item.thumbnailClass?' '+item.thumbnailClass:'';var handleRenderItem=item.renderItem||renderItem||_this4.renderItem;var handleRenderThumbInner=item.renderThumbInner||renderThumbInner||_this4.renderThumbInner;var showItem=!lazyLoad||alignment||_this4.lazyLoaded[index];if(showItem&&lazyLoad&&!_this4.lazyLoaded[index]){_this4.lazyLoaded[index]=true;}var slideStyle=_this4.getSlideStyle(index);var slide=_react2.default.createElement('div',{'aria-label':'Go to Slide '+(index+1),key:'slide-'+item.original+'-'+index,tabIndex:'-1',className:'image-gallery-slide '+alignment+' '+originalClass,style:slideStyle,onClick:onClick,onKeyUp:_this4.handleSlideKeyUp,onTouchMove:onTouchMove,onTouchEnd:onTouchEnd,onTouchStart:onTouchStart,onMouseOver:onMouseOver,onFocus:onMouseOver,onMouseLeave:onMouseLeave,role:'button'},showItem?handleRenderItem(item):_react2.default.createElement('div',{style:{height:'100%'}}));if(infinite){// don't add some slides while transitioning to avoid background transitions\nif(_this4.shouldPushSlideOnInfiniteMode(index)){slides.push(slide);}}else{slides.push(slide);}if(showThumbnails){var igThumbnailClass=(0,_clsx2.default)('image-gallery-thumbnail',thumbnailClass,{active:currentIndex===index});thumbnails.push(_react2.default.createElement('button',{key:'thumbnail-'+item.original+'-'+index,type:'button',tabIndex:'0','aria-pressed':currentIndex===index?'true':'false','aria-label':'Go to Slide '+(index+1),className:igThumbnailClass,onMouseLeave:slideOnThumbnailOver?_this4.onThumbnailMouseLeave:null,onMouseOver:function onMouseOver(event){return _this4.handleThumbnailMouseOver(event,index);},onFocus:function onFocus(event){return _this4.handleThumbnailMouseOver(event,index);},onKeyUp:function onKeyUp(event){return _this4.handleThumbnailKeyUp(event,index);},onClick:function onClick(event){return _this4.onThumbnailClick(event,index);}},handleRenderThumbInner(item)));}if(showBullets){// generate bullet elements and store them in array\nvar bulletOnClick=function bulletOnClick(event){if(item.bulletOnClick){item.bulletOnClick({item:item,itemIndex:index,currentIndex:currentIndex});}return _this4.slideToIndex.call(_this4,index,event);};var igBulletClass=(0,_clsx2.default)('image-gallery-bullet',item.bulletClass,{active:currentIndex===index});bullets.push(_react2.default.createElement('button',{type:'button',key:'bullet-'+item.original+'-'+index,className:igBulletClass,onClick:bulletOnClick,'aria-pressed':currentIndex===index?'true':'false','aria-label':'Go to Slide '+(index+1)}));}});return{slides:slides,thumbnails:thumbnails,bullets:bullets};}},{key:'ignoreIsTransitioning',value:function ignoreIsTransitioning(){/*\n        Ignore isTransitioning because were not going to sibling slides\n        e.g. center to left or center to right\n      */var items=this.props.items;var _state6=this.state,previousIndex=_state6.previousIndex,currentIndex=_state6.currentIndex;var totalSlides=items.length-1;// we want to show the in between slides transition\nvar slidingMoreThanOneSlideLeftOrRight=Math.abs(previousIndex-currentIndex)>1;var notGoingFromFirstToLast=!(previousIndex===0&&currentIndex===totalSlides);var notGoingFromLastToFirst=!(previousIndex===totalSlides&&currentIndex===0);return slidingMoreThanOneSlideLeftOrRight&&notGoingFromFirstToLast&&notGoingFromLastToFirst;}},{key:'isFirstOrLastSlide',value:function isFirstOrLastSlide(index){var items=this.props.items;var totalSlides=items.length-1;var isLastSlide=index===totalSlides;var isFirstSlide=index===0;return isLastSlide||isFirstSlide;}},{key:'slideIsTransitioning',value:function slideIsTransitioning(index){/*\n      returns true if the gallery is transitioning and the index is not the\n      previous or currentIndex\n      */var _state7=this.state,isTransitioning=_state7.isTransitioning,previousIndex=_state7.previousIndex,currentIndex=_state7.currentIndex;var indexIsNotPreviousOrNextSlide=!(index===previousIndex||index===currentIndex);return isTransitioning&&indexIsNotPreviousOrNextSlide;}},{key:'shouldPushSlideOnInfiniteMode',value:function shouldPushSlideOnInfiniteMode(index){/*\n        Push (show) slide if slide is the current slide and the next slide\n        OR\n        The slide is going more than one slide left or right, but not going from\n        first to last and not going from last to first\n         Edge case:\n        If you go to the first or last slide, when they're\n        not left, or right of each other they will try to catch up in the background\n        so unless were going from first to last or vice versa we don't want the first\n        or last slide to show up during the transition\n      */return!this.slideIsTransitioning(index)||this.ignoreIsTransitioning()&&!this.isFirstOrLastSlide(index);}},{key:'slideThumbnailBar',value:function slideThumbnailBar(previousIndex){var _state8=this.state,thumbsTranslate=_state8.thumbsTranslate,currentIndex=_state8.currentIndex;if(currentIndex===0){this.setThumbsTranslate(0);}else{var indexDifference=Math.abs(previousIndex-currentIndex);var scroll=this.getThumbsTranslate(indexDifference);if(scroll>0){if(previousIndex<currentIndex){this.setThumbsTranslate(thumbsTranslate-scroll);}else if(previousIndex>currentIndex){this.setThumbsTranslate(thumbsTranslate+scroll);}}}}},{key:'canSlide',value:function canSlide(){var items=this.props.items;return items.length>=2;}},{key:'canSlideLeft',value:function canSlideLeft(){var _props9=this.props,infinite=_props9.infinite,isRTL=_props9.isRTL;return infinite||(isRTL?this.canSlideNext():this.canSlidePrevious());}},{key:'canSlideRight',value:function canSlideRight(){var _props10=this.props,infinite=_props10.infinite,isRTL=_props10.isRTL;return infinite||(isRTL?this.canSlidePrevious():this.canSlideNext());}},{key:'canSlidePrevious',value:function canSlidePrevious(){var currentIndex=this.state.currentIndex;return currentIndex>0;}},{key:'canSlideNext',value:function canSlideNext(){var currentIndex=this.state.currentIndex;var items=this.props.items;return currentIndex<items.length-1;}},{key:'handleSwiping',value:function handleSwiping(_ref){var event=_ref.event,absX=_ref.absX,dir=_ref.dir;var _props11=this.props,preventDefaultTouchmoveEvent=_props11.preventDefaultTouchmoveEvent,disableSwipe=_props11.disableSwipe,stopPropagation=_props11.stopPropagation;var _state9=this.state,galleryWidth=_state9.galleryWidth,isTransitioning=_state9.isTransitioning,scrollingUpDown=_state9.scrollingUpDown,scrollingLeftRight=_state9.scrollingLeftRight;if(disableSwipe)return;var swipingTransitionDuration=this.props.swipingTransitionDuration;this.setScrollDirection(dir);if(stopPropagation)event.stopPropagation();if((preventDefaultTouchmoveEvent||scrollingLeftRight)&&event.cancelable){event.preventDefault();}if(!isTransitioning&&!scrollingUpDown){var side=dir===_reactSwipeable.RIGHT?1:-1;var currentSlideOffset=absX/galleryWidth*100;if(Math.abs(currentSlideOffset)>=100){currentSlideOffset=100;}var swipingTransition={transition:'transform '+swipingTransitionDuration+'ms ease-out'};this.setState({currentSlideOffset:side*currentSlideOffset,slideStyle:swipingTransition});}else{// don't move the slide\nthis.setState({currentSlideOffset:0});}}},{key:'sufficientSwipe',value:function sufficientSwipe(){var currentSlideOffset=this.state.currentSlideOffset;var swipeThreshold=this.props.swipeThreshold;return Math.abs(currentSlideOffset)>swipeThreshold;}},{key:'handleOnSwiped',value:function handleOnSwiped(_ref2){var event=_ref2.event,dir=_ref2.dir,velocity=_ref2.velocity;var _props12=this.props,disableSwipe=_props12.disableSwipe,stopPropagation=_props12.stopPropagation,flickThreshold=_props12.flickThreshold;var _state10=this.state,scrollingUpDown=_state10.scrollingUpDown,scrollingLeftRight=_state10.scrollingLeftRight;if(disableSwipe)return;var isRTL=this.props.isRTL;if(stopPropagation)event.stopPropagation();if(scrollingUpDown){// user stopped scrollingUpDown\nthis.setState({scrollingUpDown:false});}if(scrollingLeftRight){// user stopped scrollingLeftRight\nthis.setState({scrollingLeftRight:false});}if(!scrollingUpDown){// don't swipe if user is scrolling\n// if it is RTL the direction is reversed\nvar swipeDirection=(dir===_reactSwipeable.LEFT?1:-1)*(isRTL?-1:1);var isFlick=velocity>flickThreshold;this.handleOnSwipedTo(swipeDirection,isFlick);}}},{key:'handleOnSwipedTo',value:function handleOnSwipedTo(swipeDirection,isFlick){var _state11=this.state,currentIndex=_state11.currentIndex,isTransitioning=_state11.isTransitioning;var slideTo=currentIndex;if((this.sufficientSwipe()||isFlick)&&!isTransitioning){// slideto the next/prev slide\nslideTo+=swipeDirection;}// If we can't swipe left or right, stay in the current index (noop)\nif(swipeDirection===-1&&!this.canSlideLeft()||swipeDirection===1&&!this.canSlideRight()){slideTo=currentIndex;}this.unthrottledSlideToIndex(slideTo);}},{key:'handleMouseDown',value:function handleMouseDown(){// keep track of mouse vs keyboard usage for a11y\nthis.imageGallery.current.classList.add('image-gallery-using-mouse');}},{key:'handleKeyDown',value:function handleKeyDown(event){var _props13=this.props,disableKeyDown=_props13.disableKeyDown,useBrowserFullscreen=_props13.useBrowserFullscreen;var isFullscreen=this.state.isFullscreen;// keep track of mouse vs keyboard usage for a11y\nthis.imageGallery.current.classList.remove('image-gallery-using-mouse');if(disableKeyDown)return;var LEFT_ARROW=37;var RIGHT_ARROW=39;var ESC_KEY=27;var key=parseInt(event.keyCode||event.which||0,10);switch(key){case LEFT_ARROW:if(this.canSlideLeft()&&!this.playPauseIntervalId){this.slideLeft(event);}break;case RIGHT_ARROW:if(this.canSlideRight()&&!this.playPauseIntervalId){this.slideRight(event);}break;case ESC_KEY:if(isFullscreen&&!useBrowserFullscreen){this.exitFullScreen();}break;default:break;}}},{key:'handleImageError',value:function handleImageError(event){var onErrorImageURL=this.props.onErrorImageURL;if(onErrorImageURL&&event.target.src.indexOf(onErrorImageURL)===-1){/* eslint-disable no-param-reassign */event.target.src=onErrorImageURL;/* eslint-enable no-param-reassign */}}},{key:'removeResizeObserver',value:function removeResizeObserver(){if(this.resizeObserver&&this.imageGallerySlideWrapper&&this.imageGallerySlideWrapper.current){this.resizeObserver.unobserve(this.imageGallerySlideWrapper.current);}}},{key:'handleResize',value:function handleResize(){var currentIndex=this.state.currentIndex;if(this.imageGallery&&this.imageGallery.current){this.setState({galleryWidth:this.imageGallery.current.offsetWidth});}if(this.imageGallerySlideWrapper&&this.imageGallerySlideWrapper.current){this.setState({gallerySlideWrapperHeight:this.imageGallerySlideWrapper.current.offsetHeight});}if(this.thumbnailsWrapper&&this.thumbnailsWrapper.current){if(this.isThumbnailVertical()){this.setState({thumbnailsWrapperHeight:this.thumbnailsWrapper.current.offsetHeight});}else{this.setState({thumbnailsWrapperWidth:this.thumbnailsWrapper.current.offsetWidth});}}// Adjust thumbnail container when thumbnail width or height is adjusted\nthis.setThumbsTranslate(-this.getThumbsTranslate(currentIndex));}},{key:'initResizeObserver',value:function initResizeObserver(element){var _this5=this;this.resizeObserver=new _resizeObserverPolyfill2.default((0,_lodash4.default)(function(entries){if(!entries)return;entries.forEach(function(){_this5.handleResize();});},300));this.resizeObserver.observe(element.current);}},{key:'toggleFullScreen',value:function toggleFullScreen(){var isFullscreen=this.state.isFullscreen;if(isFullscreen){this.exitFullScreen();}else{this.fullScreen();}}},{key:'togglePlay',value:function togglePlay(){if(this.playPauseIntervalId){this.pause();}else{this.play();}}},{key:'handleScreenChange',value:function handleScreenChange(){/*\n        handles screen change events that the browser triggers e.g. esc key\n      */var _props14=this.props,onScreenChange=_props14.onScreenChange,useBrowserFullscreen=_props14.useBrowserFullscreen;var fullScreenElement=document.fullscreenElement||document.msFullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement;// check if screenchange element is the gallery\nvar isFullscreen=this.imageGallery.current===fullScreenElement;if(onScreenChange)onScreenChange(isFullscreen);if(useBrowserFullscreen)this.setState({isFullscreen:isFullscreen});}},{key:'slideToIndex',value:function slideToIndex(index,event){var _state12=this.state,currentIndex=_state12.currentIndex,isTransitioning=_state12.isTransitioning;var _props15=this.props,items=_props15.items,slideDuration=_props15.slideDuration,onBeforeSlide=_props15.onBeforeSlide;if(!isTransitioning){if(event){if(this.playPauseIntervalId){// user triggered event while ImageGallery is playing, reset interval\nthis.pause(false);this.play(false);}}var slideCount=items.length-1;var nextIndex=index;if(index<0){nextIndex=slideCount;}else if(index>slideCount){nextIndex=0;}if(onBeforeSlide&&nextIndex!==currentIndex){onBeforeSlide(nextIndex);}this.setState({previousIndex:currentIndex,currentIndex:nextIndex,isTransitioning:nextIndex!==currentIndex,currentSlideOffset:0,slideStyle:{transition:'all '+slideDuration+'ms ease-out'}},this.onSliding);}}},{key:'slideLeft',value:function slideLeft(event){var isRTL=this.props.isRTL;if(isRTL){this.slideNext(event);}else{this.slidePrevious(event);}}},{key:'slideRight',value:function slideRight(event){var isRTL=this.props.isRTL;if(isRTL){this.slidePrevious(event);}else{this.slideNext(event);}}},{key:'slidePrevious',value:function slidePrevious(event){var _this6=this;var _state13=this.state,currentIndex=_state13.currentIndex,currentSlideOffset=_state13.currentSlideOffset,isTransitioning=_state13.isTransitioning;var items=this.props.items;var nextIndex=currentIndex-1;if(isTransitioning)return;if(items.length===2){/*\n          When there are only 2 slides fake a tiny swipe to get the slides\n          on the correct side for transitioning\n        */this.setState({currentSlideOffset:currentSlideOffset+0.001,// this will reset once index changes\nslideStyle:{transition:'none'}// move the slide over instantly\n},function(){// add 25ms timeout to avoid delay in moving slides over\nwindow.setTimeout(function(){return _this6.slideToIndex(nextIndex,event);},25);});}else{this.slideToIndex(nextIndex,event);}}},{key:'slideNext',value:function slideNext(event){var _this7=this;var _state14=this.state,currentIndex=_state14.currentIndex,currentSlideOffset=_state14.currentSlideOffset,isTransitioning=_state14.isTransitioning;var items=this.props.items;var nextIndex=currentIndex+1;if(isTransitioning)return;if(items.length===2){// same as above for 2 slides\nthis.setState({currentSlideOffset:currentSlideOffset-0.001,slideStyle:{transition:'none'}},function(){window.setTimeout(function(){return _this7.slideToIndex(nextIndex,event);},25);});}else{this.slideToIndex(nextIndex,event);}}},{key:'handleThumbnailMouseOver',value:function handleThumbnailMouseOver(event,index){var slideOnThumbnailOver=this.props.slideOnThumbnailOver;if(slideOnThumbnailOver)this.onThumbnailMouseOver(event,index);}},{key:'handleThumbnailKeyUp',value:function handleThumbnailKeyUp(event,index){// a11y support ^_^\nif(isEnterOrSpaceKey(event))this.onThumbnailClick(event,index);}},{key:'handleSlideKeyUp',value:function handleSlideKeyUp(event){// a11y support ^_^\nif(isEnterOrSpaceKey(event)){var onClick=this.props.onClick;onClick(event);}}},{key:'isThumbnailVertical',value:function isThumbnailVertical(){var thumbnailPosition=this.props.thumbnailPosition;return thumbnailPosition==='left'||thumbnailPosition==='right';}},{key:'addScreenChangeEvent',value:function addScreenChangeEvent(){var _this8=this;screenChangeEvents.forEach(function(eventName){document.addEventListener(eventName,_this8.handleScreenChange);});}},{key:'removeScreenChangeEvent',value:function removeScreenChangeEvent(){var _this9=this;screenChangeEvents.forEach(function(eventName){document.removeEventListener(eventName,_this9.handleScreenChange);});}},{key:'fullScreen',value:function fullScreen(){var useBrowserFullscreen=this.props.useBrowserFullscreen;var gallery=this.imageGallery.current;if(useBrowserFullscreen){if(gallery.requestFullscreen){gallery.requestFullscreen();}else if(gallery.msRequestFullscreen){gallery.msRequestFullscreen();}else if(gallery.mozRequestFullScreen){gallery.mozRequestFullScreen();}else if(gallery.webkitRequestFullscreen){gallery.webkitRequestFullscreen();}else{// fallback to fullscreen modal for unsupported browsers\nthis.setModalFullscreen(true);}}else{this.setModalFullscreen(true);}this.setState({isFullscreen:true});}},{key:'exitFullScreen',value:function exitFullScreen(){var isFullscreen=this.state.isFullscreen;var useBrowserFullscreen=this.props.useBrowserFullscreen;if(isFullscreen){if(useBrowserFullscreen){if(document.exitFullscreen){document.exitFullscreen();}else if(document.webkitExitFullscreen){document.webkitExitFullscreen();}else if(document.mozCancelFullScreen){document.mozCancelFullScreen();}else if(document.msExitFullscreen){document.msExitFullscreen();}else{// fallback to fullscreen modal for unsupported browsers\nthis.setModalFullscreen(false);}}else{this.setModalFullscreen(false);}this.setState({isFullscreen:false});}}},{key:'pauseOrPlay',value:function pauseOrPlay(){var infinite=this.props.infinite;var currentIndex=this.state.currentIndex;if(!infinite&&!this.canSlideRight()){this.pause();}else{this.slideToIndex(currentIndex+1);}}},{key:'play',value:function play(){var shouldCallOnPlay=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var _props16=this.props,onPlay=_props16.onPlay,slideInterval=_props16.slideInterval,slideDuration=_props16.slideDuration;var currentIndex=this.state.currentIndex;if(!this.playPauseIntervalId){this.setState({isPlaying:true});this.playPauseIntervalId=window.setInterval(this.pauseOrPlay,Math.max(slideInterval,slideDuration));if(onPlay&&shouldCallOnPlay){onPlay(currentIndex);}}}},{key:'pause',value:function pause(){var shouldCallOnPause=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var onPause=this.props.onPause;var currentIndex=this.state.currentIndex;if(this.playPauseIntervalId){window.clearInterval(this.playPauseIntervalId);this.playPauseIntervalId=null;this.setState({isPlaying:false});if(onPause&&shouldCallOnPause){onPause(currentIndex);}}}},{key:'isImageLoaded',value:function isImageLoaded(item){/*\n        Keep track of images loaded so that onImageLoad prop is not\n        called multiple times when re-render the images\n      */var imageExists=this.loadedImages[item.original];if(imageExists){return true;}// add image as loaded\nthis.loadedImages[item.original]=true;return false;}},{key:'handleImageLoaded',value:function handleImageLoaded(event,item){var onImageLoad=this.props.onImageLoad;var imageExists=this.loadedImages[item.original];if(!imageExists&&onImageLoad){this.loadedImages[item.original]=true;// prevent from call again\n// image just loaded, call onImageLoad\nonImageLoad(event);}}},{key:'renderItem',value:function renderItem(item){var _this10=this;var isFullscreen=this.state.isFullscreen;var onImageError=this.props.onImageError;var handleImageError=onImageError||this.handleImageError;var itemSrc=isFullscreen?item.fullscreen||item.original:item.original;return _react2.default.createElement('div',null,item.imageSet?_react2.default.createElement('picture',{onLoad:function onLoad(event){return _this10.handleImageLoaded(event,item);},onError:handleImageError},item.imageSet.map(function(source,index){return _react2.default.createElement('source',{key:'media-'+source.srcSet+'-'+index,media:source.media,srcSet:source.srcSet,type:source.type});}),_react2.default.createElement('img',{className:'image-gallery-image',alt:item.originalAlt,src:itemSrc})):_react2.default.createElement('img',{className:'image-gallery-image',src:itemSrc,alt:item.originalAlt,srcSet:item.srcSet,sizes:item.sizes,title:item.originalTitle,onLoad:function onLoad(event){return _this10.handleImageLoaded(event,item);},onError:handleImageError}),item.description&&_react2.default.createElement('span',{className:'image-gallery-description'},item.description));}},{key:'renderThumbInner',value:function renderThumbInner(item){var onThumbnailError=this.props.onThumbnailError;var handleThumbnailError=onThumbnailError||this.handleImageError;return _react2.default.createElement('div',{className:'image-gallery-thumbnail-inner'},_react2.default.createElement('img',{className:'image-gallery-thumbnail-image',src:item.thumbnail,alt:item.thumbnailAlt,title:item.thumbnailTitle,onError:handleThumbnailError}),item.thumbnailLabel&&_react2.default.createElement('div',{className:'image-gallery-thumbnail-label'},item.thumbnailLabel));}},{key:'render',value:function render(){var _state15=this.state,currentIndex=_state15.currentIndex,isFullscreen=_state15.isFullscreen,modalFullscreen=_state15.modalFullscreen,isPlaying=_state15.isPlaying;var _props17=this.props,additionalClass=_props17.additionalClass,indexSeparator=_props17.indexSeparator,isRTL=_props17.isRTL,items=_props17.items,thumbnailPosition=_props17.thumbnailPosition,renderFullscreenButton=_props17.renderFullscreenButton,renderCustomControls=_props17.renderCustomControls,renderLeftNav=_props17.renderLeftNav,renderRightNav=_props17.renderRightNav,showBullets=_props17.showBullets,showFullscreenButton=_props17.showFullscreenButton,showIndex=_props17.showIndex,showThumbnails=_props17.showThumbnails,showNav=_props17.showNav,showPlayButton=_props17.showPlayButton,renderPlayPauseButton=_props17.renderPlayPauseButton;var thumbnailStyle=this.getThumbnailStyle();var _getSlideItems=this.getSlideItems(),slides=_getSlideItems.slides,thumbnails=_getSlideItems.thumbnails,bullets=_getSlideItems.bullets;var slideWrapperClass=(0,_clsx2.default)('image-gallery-slide-wrapper',thumbnailPosition,{'image-gallery-rtl':isRTL});var slideWrapper=_react2.default.createElement('div',{ref:this.imageGallerySlideWrapper,className:slideWrapperClass},renderCustomControls&&renderCustomControls(),this.canSlide()?_react2.default.createElement(_react2.default.Fragment,null,showNav&&_react2.default.createElement(_react2.default.Fragment,null,renderLeftNav(this.slideLeft,!this.canSlideLeft()),renderRightNav(this.slideRight,!this.canSlideRight())),_react2.default.createElement(_reactSwipeable.Swipeable,{className:'image-gallery-swipe',delta:0,onSwiping:this.handleSwiping,onSwiped:this.handleOnSwiped},_react2.default.createElement('div',{className:'image-gallery-slides'},slides))):_react2.default.createElement('div',{className:'image-gallery-slides'},slides),showPlayButton&&renderPlayPauseButton(this.togglePlay,isPlaying),showBullets&&_react2.default.createElement('div',{className:'image-gallery-bullets'},_react2.default.createElement('div',{className:'image-gallery-bullets-container',role:'navigation','aria-label':'Bullet Navigation'},bullets)),showFullscreenButton&&renderFullscreenButton(this.toggleFullScreen,isFullscreen),showIndex&&_react2.default.createElement('div',{className:'image-gallery-index'},_react2.default.createElement('span',{className:'image-gallery-index-current'},currentIndex+1),_react2.default.createElement('span',{className:'image-gallery-index-separator'},indexSeparator),_react2.default.createElement('span',{className:'image-gallery-index-total'},items.length)));var igClass=(0,_clsx2.default)('image-gallery',additionalClass,{'fullscreen-modal':modalFullscreen});var igContentClass=(0,_clsx2.default)('image-gallery-content',thumbnailPosition,{fullscreen:isFullscreen});var thumbnailWrapperClass=(0,_clsx2.default)('image-gallery-thumbnails-wrapper',thumbnailPosition,{'thumbnails-wrapper-rtl':!this.isThumbnailVertical()&&isRTL});return _react2.default.createElement('div',{ref:this.imageGallery,className:igClass,'aria-live':'polite'},_react2.default.createElement('div',{className:igContentClass},(thumbnailPosition==='bottom'||thumbnailPosition==='right')&&slideWrapper,showThumbnails&&_react2.default.createElement('div',{className:thumbnailWrapperClass,style:this.getThumbnailBarHeight()},_react2.default.createElement('div',{className:'image-gallery-thumbnails',ref:this.thumbnailsWrapper},_react2.default.createElement('div',{ref:this.thumbnails,className:'image-gallery-thumbnails-container',style:thumbnailStyle,'aria-label':'Thumbnail Navigation'},thumbnails))),(thumbnailPosition==='top'||thumbnailPosition==='left')&&slideWrapper));}}]);return ImageGallery;}(_react2.default.Component);ImageGallery.propTypes={flickThreshold:_propTypes.number,items:(0,_propTypes.arrayOf)((0,_propTypes.shape)({bulletClass:_propTypes.string,bulletOnClick:_propTypes.func,description:_propTypes.string,original:_propTypes.string.isRequired,fullscreen:_propTypes.string,originalAlt:_propTypes.string,originalTitle:_propTypes.string,thumbnail:_propTypes.string,thumbnailAlt:_propTypes.string,thumbnailLabel:_propTypes.string,thumbnailTitle:_propTypes.string,originalClass:_propTypes.string,thumbnailClass:_propTypes.string,renderItem:_propTypes.func,renderThumbInner:_propTypes.func,imageSet:imageSetType,srcSet:_propTypes.string,sizes:_propTypes.string})).isRequired,showNav:_propTypes.bool,autoPlay:_propTypes.bool,lazyLoad:_propTypes.bool,infinite:_propTypes.bool,showIndex:_propTypes.bool,showBullets:_propTypes.bool,showThumbnails:_propTypes.bool,showPlayButton:_propTypes.bool,showFullscreenButton:_propTypes.bool,disableThumbnailScroll:_propTypes.bool,disableKeyDown:_propTypes.bool,disableSwipe:_propTypes.bool,useBrowserFullscreen:_propTypes.bool,preventDefaultTouchmoveEvent:_propTypes.bool,onErrorImageURL:_propTypes.string,indexSeparator:_propTypes.string,thumbnailPosition:(0,_propTypes.oneOf)(['top','bottom','left','right']),startIndex:_propTypes.number,slideDuration:_propTypes.number,slideInterval:_propTypes.number,slideOnThumbnailOver:_propTypes.bool,swipeThreshold:_propTypes.number,swipingTransitionDuration:_propTypes.number,onSlide:_propTypes.func,onBeforeSlide:_propTypes.func,onScreenChange:_propTypes.func,onPause:_propTypes.func,onPlay:_propTypes.func,onClick:_propTypes.func,onImageLoad:_propTypes.func,onImageError:_propTypes.func,onTouchMove:_propTypes.func,onTouchEnd:_propTypes.func,onTouchStart:_propTypes.func,onMouseOver:_propTypes.func,onMouseLeave:_propTypes.func,onThumbnailError:_propTypes.func,onThumbnailClick:_propTypes.func,renderCustomControls:_propTypes.func,renderLeftNav:_propTypes.func,renderRightNav:_propTypes.func,renderPlayPauseButton:_propTypes.func,renderFullscreenButton:_propTypes.func,renderItem:_propTypes.func,renderThumbInner:_propTypes.func,stopPropagation:_propTypes.bool,additionalClass:_propTypes.string,useTranslate3D:_propTypes.bool,isRTL:_propTypes.bool,useWindowKeyDown:_propTypes.bool};ImageGallery.defaultProps={onErrorImageURL:'',additionalClass:'',showNav:true,autoPlay:false,lazyLoad:false,infinite:true,showIndex:false,showBullets:false,showThumbnails:true,showPlayButton:true,showFullscreenButton:true,disableThumbnailScroll:false,disableKeyDown:false,disableSwipe:false,useTranslate3D:true,isRTL:false,useBrowserFullscreen:true,preventDefaultTouchmoveEvent:false,flickThreshold:0.4,stopPropagation:false,indexSeparator:' / ',thumbnailPosition:'bottom',startIndex:0,slideDuration:450,swipingTransitionDuration:0,onSlide:null,onBeforeSlide:null,onScreenChange:null,onPause:null,onPlay:null,onClick:null,onImageLoad:null,onImageError:null,onTouchMove:null,onTouchEnd:null,onTouchStart:null,onMouseOver:null,onMouseLeave:null,onThumbnailError:null,onThumbnailClick:null,renderCustomControls:null,renderThumbInner:null,renderItem:null,slideInterval:3000,slideOnThumbnailOver:false,swipeThreshold:30,renderLeftNav:function renderLeftNav(onClick,disabled){return _react2.default.createElement('button',{type:'button',className:'image-gallery-icon image-gallery-left-nav',disabled:disabled,onClick:onClick,'aria-label':'Previous Slide'},_react2.default.createElement(_SVG2.default,{icon:'left',viewBox:'6 0 12 24'}));},renderRightNav:function renderRightNav(onClick,disabled){return _react2.default.createElement('button',{type:'button',className:'image-gallery-icon image-gallery-right-nav',disabled:disabled,onClick:onClick,'aria-label':'Next Slide'},_react2.default.createElement(_SVG2.default,{icon:'right',viewBox:'6 0 12 24'}));},renderPlayPauseButton:function renderPlayPauseButton(onClick,isPlaying){return _react2.default.createElement('button',{type:'button',className:'image-gallery-icon image-gallery-play-button',onClick:onClick,'aria-label':'Play or Pause Slideshow'},_react2.default.createElement(_SVG2.default,{strokeWidth:2,icon:isPlaying?'pause':'play'}));},renderFullscreenButton:function renderFullscreenButton(onClick,isFullscreen){return _react2.default.createElement('button',{type:'button',className:'image-gallery-icon image-gallery-fullscreen-button',onClick:onClick,'aria-label':'Open Fullscreen'},_react2.default.createElement(_SVG2.default,{strokeWidth:2,icon:isFullscreen?'minimize':'maximize'}));},useWindowKeyDown:true};exports.default=ImageGallery;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-image-gallery/build/image-gallery.js\n");

/***/ }),

/***/ "./node_modules/react-swipeable/es/index.js":
/*!**************************************************!*\
  !*** ./node_modules/react-swipeable/es/index.js ***!
  \**************************************************/
/*! exports provided: DOWN, LEFT, RIGHT, Swipeable, UP, useSwipeable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOWN\", function() { return DOWN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LEFT\", function() { return LEFT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RIGHT\", function() { return RIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Swipeable\", function() { return Swipeable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UP\", function() { return UP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useSwipeable\", function() { return useSwipeable; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\nfunction _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}var defaultProps={preventDefaultTouchmoveEvent:false,delta:10,rotationAngle:0,trackMouse:false,trackTouch:true};var initialState={xy:[0,0],swiping:false,eventData:undefined,start:undefined};var LEFT='Left';var RIGHT='Right';var UP='Up';var DOWN='Down';var touchStart='touchstart';var touchMove='touchmove';var touchEnd='touchend';var mouseMove='mousemove';var mouseUp='mouseup';function getDirection(absX,absY,deltaX,deltaY){if(absX>absY){if(deltaX>0){return LEFT;}return RIGHT;}else if(deltaY>0){return UP;}return DOWN;}function rotateXYByAngle(pos,angle){if(angle===0)return pos;var angleInRadians=Math.PI/180*angle;var x=pos[0]*Math.cos(angleInRadians)+pos[1]*Math.sin(angleInRadians);var y=pos[1]*Math.cos(angleInRadians)-pos[0]*Math.sin(angleInRadians);return[x,y];}function getHandlers(set,handlerProps){var onStart=function onStart(event){// if more than a single touch don't track, for now...\nif(event.touches&&event.touches.length>1)return;set(function(state,props){// setup mouse listeners on document to track swipe since swipe can leave container\nif(props.trackMouse){document.addEventListener(mouseMove,onMove);document.addEventListener(mouseUp,onUp);}var _ref=event.touches?event.touches[0]:event,clientX=_ref.clientX,clientY=_ref.clientY;var xy=rotateXYByAngle([clientX,clientY],props.rotationAngle);return _extends({},state,initialState,{eventData:{initial:[].concat(xy),first:true},xy:xy,start:event.timeStamp||0});});};var onMove=function onMove(event){set(function(state,props){if(!state.xy[0]||!state.xy[1]||event.touches&&event.touches.length>1){return state;}var _ref2=event.touches?event.touches[0]:event,clientX=_ref2.clientX,clientY=_ref2.clientY;var _rotateXYByAngle=rotateXYByAngle([clientX,clientY],props.rotationAngle),x=_rotateXYByAngle[0],y=_rotateXYByAngle[1];var deltaX=state.xy[0]-x;var deltaY=state.xy[1]-y;var absX=Math.abs(deltaX);var absY=Math.abs(deltaY);var time=(event.timeStamp||0)-state.start;var velocity=Math.sqrt(absX*absX+absY*absY)/(time||1);// if swipe is under delta and we have not started to track a swipe: skip update\nif(absX<props.delta&&absY<props.delta&&!state.swiping)return state;var dir=getDirection(absX,absY,deltaX,deltaY);var eventData=_extends({},state.eventData,{event:event,absX:absX,absY:absY,deltaX:deltaX,deltaY:deltaY,velocity:velocity,dir:dir});props.onSwiping&&props.onSwiping(eventData);// track if a swipe is cancelable(handler for swiping or swiped(dir) exists)\n// so we can call preventDefault if needed\nvar cancelablePageSwipe=false;if(props.onSwiping||props.onSwiped||props[\"onSwiped\"+dir]){cancelablePageSwipe=true;}if(cancelablePageSwipe&&props.preventDefaultTouchmoveEvent&&props.trackTouch&&event.cancelable)event.preventDefault();// first is now always false\nreturn _extends({},state,{eventData:_extends({},eventData,{first:false}),swiping:true});});};var onEnd=function onEnd(event){set(function(state,props){var eventData;if(state.swiping){eventData=_extends({},state.eventData,{event:event});props.onSwiped&&props.onSwiped(eventData);props[\"onSwiped\"+eventData.dir]&&props[\"onSwiped\"+eventData.dir](eventData);}return _extends({},state,initialState,{eventData:eventData});});};var cleanUpMouse=function cleanUpMouse(){// safe to just call removeEventListener\ndocument.removeEventListener(mouseMove,onMove);document.removeEventListener(mouseUp,onUp);};var onUp=function onUp(e){cleanUpMouse();onEnd(e);};var attachTouch=function attachTouch(el){if(el&&el.addEventListener){// attach touch event listeners and handlers\nvar tls=[[touchStart,onStart],[touchMove,onMove],[touchEnd,onEnd]];tls.forEach(function(_ref3){var e=_ref3[0],h=_ref3[1];return el.addEventListener(e,h);});// return properly scoped cleanup method for removing listeners\nreturn function(){return tls.forEach(function(_ref4){var e=_ref4[0],h=_ref4[1];return el.removeEventListener(e,h);});};}};var onRef=function onRef(el){// \"inline\" ref functions are called twice on render, once with null then again with DOM element\n// ignore null here\nif(el===null)return;set(function(state,props){// if the same DOM el as previous just return state\nif(state.el===el)return state;var addState={};// if new DOM el clean up old DOM and reset cleanUpTouch\nif(state.el&&state.el!==el&&state.cleanUpTouch){state.cleanUpTouch();addState.cleanUpTouch=null;}// only attach if we want to track touch\nif(props.trackTouch&&el){addState.cleanUpTouch=attachTouch(el);}// store event attached DOM el for comparison, clean up, and re-attachment\nreturn _extends({},state,{el:el},addState);});};// set ref callback to attach touch event listeners\nvar output={ref:onRef// if track mouse attach mouse down listener\n};if(handlerProps.trackMouse){output.onMouseDown=onStart;}return[output,attachTouch];}function updateTransientState(state,props,attachTouch){var addState={};// clean up touch handlers if no longer tracking touches\nif(!props.trackTouch&&state.cleanUpTouch){state.cleanUpTouch();addState.cleanUpTouch=null;}else if(props.trackTouch&&!state.cleanUpTouch){// attach/re-attach touch handlers\nif(state.el){addState.cleanUpTouch=attachTouch(state.el);}}return _extends({},state,addState);}function useSwipeable(props){var trackMouse=props.trackMouse;var transientState=react__WEBPACK_IMPORTED_MODULE_0___default.a.useRef(_extends({},initialState,{type:'hook'}));var transientProps=react__WEBPACK_IMPORTED_MODULE_0___default.a.useRef();transientProps.current=_extends({},defaultProps,props);var _React$useMemo=react__WEBPACK_IMPORTED_MODULE_0___default.a.useMemo(function(){return getHandlers(function(cb){return transientState.current=cb(transientState.current,transientProps.current);},{trackMouse:trackMouse});},[trackMouse]),handlers=_React$useMemo[0],attachTouch=_React$useMemo[1];transientState.current=updateTransientState(transientState.current,transientProps.current,attachTouch);return handlers;}var Swipeable=/*#__PURE__*/function(_React$PureComponent){_inheritsLoose(Swipeable,_React$PureComponent);function Swipeable(props){var _this;_this=_React$PureComponent.call(this,props)||this;_this._set=function(cb){_this.transientState=cb(_this.transientState,_this.props);};_this.transientState=_extends({},initialState,{type:'class'});return _this;}var _proto=Swipeable.prototype;_proto.render=function render(){var _this$props=this.props,className=_this$props.className,style=_this$props.style,_this$props$nodeName=_this$props.nodeName,nodeName=_this$props$nodeName===void 0?'div':_this$props$nodeName,innerRef=_this$props.innerRef,children=_this$props.children,trackMouse=_this$props.trackMouse;var _getHandlers=getHandlers(this._set,{trackMouse:trackMouse}),handlers=_getHandlers[0],attachTouch=_getHandlers[1];this.transientState=updateTransientState(this.transientState,this.props,attachTouch);var ref=innerRef?function(el){return innerRef(el),handlers.ref(el);}:handlers.ref;return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(nodeName,_extends({},handlers,{className:className,style:style,ref:ref}),children);};return Swipeable;}(react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent);Swipeable.propTypes={onSwiped:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,onSwiping:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,onSwipedUp:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,onSwipedRight:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,onSwipedDown:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,onSwipedLeft:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,delta:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,preventDefaultTouchmoveEvent:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,nodeName:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,trackMouse:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,trackTouch:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,innerRef:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,rotationAngle:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number};Swipeable.defaultProps=defaultProps;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-swipeable/es/index.js\n");

/***/ }),

/***/ "./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */ /* eslint-disable require-jsdoc, valid-jsdoc */var MapShim=function(){if(typeof Map!=='undefined'){return Map;}/**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */function getIndex(arr,key){var result=-1;arr.some(function(entry,index){if(entry[0]===key){result=index;return true;}return false;});return result;}return(/** @class */function(){function class_1(){this.__entries__=[];}Object.defineProperty(class_1.prototype,\"size\",{/**\r\n             * @returns {boolean}\r\n             */get:function get(){return this.__entries__.length;},enumerable:true,configurable:true});/**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */class_1.prototype.get=function(key){var index=getIndex(this.__entries__,key);var entry=this.__entries__[index];return entry&&entry[1];};/**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */class_1.prototype.set=function(key,value){var index=getIndex(this.__entries__,key);if(~index){this.__entries__[index][1]=value;}else{this.__entries__.push([key,value]);}};/**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */class_1.prototype.delete=function(key){var entries=this.__entries__;var index=getIndex(entries,key);if(~index){entries.splice(index,1);}};/**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */class_1.prototype.has=function(key){return!!~getIndex(this.__entries__,key);};/**\r\n         * @returns {void}\r\n         */class_1.prototype.clear=function(){this.__entries__.splice(0);};/**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */class_1.prototype.forEach=function(callback,ctx){if(ctx===void 0){ctx=null;}for(var _i=0,_a=this.__entries__;_i<_a.length;_i++){var entry=_a[_i];callback.call(ctx,entry[1],entry[0]);}};return class_1;}());}();/**\r\n * Detects whether window and document objects are available in current environment.\r\n */var isBrowser=typeof window!=='undefined'&&typeof document!=='undefined'&&window.document===document;// Returns global object of a current environment.\nvar global$1=function(){if(typeof global!=='undefined'&&global.Math===Math){return global;}if(typeof self!=='undefined'&&self.Math===Math){return self;}if(typeof window!=='undefined'&&window.Math===Math){return window;}// eslint-disable-next-line no-new-func\nreturn Function('return this')();}();/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */var requestAnimationFrame$1=function(){if(typeof requestAnimationFrame==='function'){// It's required to use a bounded function because IE sometimes throws\n// an \"Invalid calling object\" error if rAF is invoked without the global\n// object on the left hand side.\nreturn requestAnimationFrame.bind(global$1);}return function(callback){return setTimeout(function(){return callback(Date.now());},1000/60);};}();// Defines minimum timeout before adding a trailing call.\nvar trailingTimeout=2;/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */function throttle(callback,delay){var leadingCall=false,trailingCall=false,lastCallTime=0;/**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */function resolvePending(){if(leadingCall){leadingCall=false;callback();}if(trailingCall){proxy();}}/**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */function timeoutCallback(){requestAnimationFrame$1(resolvePending);}/**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */function proxy(){var timeStamp=Date.now();if(leadingCall){// Reject immediately following calls.\nif(timeStamp-lastCallTime<trailingTimeout){return;}// Schedule new call to be in invoked when the pending one is resolved.\n// This is important for \"transitions\" which never actually start\n// immediately so there is a chance that we might miss one if change\n// happens amids the pending invocation.\ntrailingCall=true;}else{leadingCall=true;trailingCall=false;setTimeout(timeoutCallback,delay);}lastCallTime=timeStamp;}return proxy;}// Minimum delay before invoking the update of observers.\nvar REFRESH_DELAY=20;// A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\nvar transitionKeys=['top','right','bottom','left','width','height','size','weight'];// Check if MutationObserver is available.\nvar mutationObserverSupported=typeof MutationObserver!=='undefined';/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */var ResizeObserverController=/** @class */function(){/**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */function ResizeObserverController(){/**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */this.connected_=false;/**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */this.mutationEventsAdded_=false;/**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */this.mutationsObserver_=null;/**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */this.observers_=[];this.onTransitionEnd_=this.onTransitionEnd_.bind(this);this.refresh=throttle(this.refresh.bind(this),REFRESH_DELAY);}/**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */ResizeObserverController.prototype.addObserver=function(observer){if(!~this.observers_.indexOf(observer)){this.observers_.push(observer);}// Add listeners if they haven't been added yet.\nif(!this.connected_){this.connect_();}};/**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */ResizeObserverController.prototype.removeObserver=function(observer){var observers=this.observers_;var index=observers.indexOf(observer);// Remove observer if it's present in registry.\nif(~index){observers.splice(index,1);}// Remove listeners if controller has no connected observers.\nif(!observers.length&&this.connected_){this.disconnect_();}};/**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */ResizeObserverController.prototype.refresh=function(){var changesDetected=this.updateObservers_();// Continue running updates if changes have been detected as there might\n// be future ones caused by CSS transitions.\nif(changesDetected){this.refresh();}};/**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */ResizeObserverController.prototype.updateObservers_=function(){// Collect observers that have active observations.\nvar activeObservers=this.observers_.filter(function(observer){return observer.gatherActive(),observer.hasActive();});// Deliver notifications in a separate cycle in order to avoid any\n// collisions between observers, e.g. when multiple instances of\n// ResizeObserver are tracking the same element and the callback of one\n// of them changes content dimensions of the observed target. Sometimes\n// this may result in notifications being blocked for the rest of observers.\nactiveObservers.forEach(function(observer){return observer.broadcastActive();});return activeObservers.length>0;};/**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */ResizeObserverController.prototype.connect_=function(){// Do nothing if running in a non-browser environment or if listeners\n// have been already added.\nif(!isBrowser||this.connected_){return;}// Subscription to the \"Transitionend\" event is used as a workaround for\n// delayed transitions. This way it's possible to capture at least the\n// final state of an element.\ndocument.addEventListener('transitionend',this.onTransitionEnd_);window.addEventListener('resize',this.refresh);if(mutationObserverSupported){this.mutationsObserver_=new MutationObserver(this.refresh);this.mutationsObserver_.observe(document,{attributes:true,childList:true,characterData:true,subtree:true});}else{document.addEventListener('DOMSubtreeModified',this.refresh);this.mutationEventsAdded_=true;}this.connected_=true;};/**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */ResizeObserverController.prototype.disconnect_=function(){// Do nothing if running in a non-browser environment or if listeners\n// have been already removed.\nif(!isBrowser||!this.connected_){return;}document.removeEventListener('transitionend',this.onTransitionEnd_);window.removeEventListener('resize',this.refresh);if(this.mutationsObserver_){this.mutationsObserver_.disconnect();}if(this.mutationEventsAdded_){document.removeEventListener('DOMSubtreeModified',this.refresh);}this.mutationsObserver_=null;this.mutationEventsAdded_=false;this.connected_=false;};/**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */ResizeObserverController.prototype.onTransitionEnd_=function(_a){var _b=_a.propertyName,propertyName=_b===void 0?'':_b;// Detect whether transition may affect dimensions of an element.\nvar isReflowProperty=transitionKeys.some(function(key){return!!~propertyName.indexOf(key);});if(isReflowProperty){this.refresh();}};/**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */ResizeObserverController.getInstance=function(){if(!this.instance_){this.instance_=new ResizeObserverController();}return this.instance_;};/**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */ResizeObserverController.instance_=null;return ResizeObserverController;}();/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */var defineConfigurable=function defineConfigurable(target,props){for(var _i=0,_a=Object.keys(props);_i<_a.length;_i++){var key=_a[_i];Object.defineProperty(target,key,{value:props[key],enumerable:false,writable:false,configurable:true});}return target;};/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */var getWindowOf=function getWindowOf(target){// Assume that the element is an instance of Node, which means that it\n// has the \"ownerDocument\" property from which we can retrieve a\n// corresponding global object.\nvar ownerGlobal=target&&target.ownerDocument&&target.ownerDocument.defaultView;// Return the local global object if it's not possible extract one from\n// provided element.\nreturn ownerGlobal||global$1;};// Placeholder of an empty content rectangle.\nvar emptyRect=createRectInit(0,0,0,0);/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */function toFloat(value){return parseFloat(value)||0;}/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */function getBordersSize(styles){var positions=[];for(var _i=1;_i<arguments.length;_i++){positions[_i-1]=arguments[_i];}return positions.reduce(function(size,position){var value=styles['border-'+position+'-width'];return size+toFloat(value);},0);}/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */function getPaddings(styles){var positions=['top','right','bottom','left'];var paddings={};for(var _i=0,positions_1=positions;_i<positions_1.length;_i++){var position=positions_1[_i];var value=styles['padding-'+position];paddings[position]=toFloat(value);}return paddings;}/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */function getSVGContentRect(target){var bbox=target.getBBox();return createRectInit(0,0,bbox.width,bbox.height);}/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */function getHTMLElementContentRect(target){// Client width & height properties can't be\n// used exclusively as they provide rounded values.\nvar clientWidth=target.clientWidth,clientHeight=target.clientHeight;// By this condition we can catch all non-replaced inline, hidden and\n// detached elements. Though elements with width & height properties less\n// than 0.5 will be discarded as well.\n//\n// Without it we would need to implement separate methods for each of\n// those cases and it's not possible to perform a precise and performance\n// effective test for hidden elements. E.g. even jQuery's ':visible' filter\n// gives wrong results for elements with width & height less than 0.5.\nif(!clientWidth&&!clientHeight){return emptyRect;}var styles=getWindowOf(target).getComputedStyle(target);var paddings=getPaddings(styles);var horizPad=paddings.left+paddings.right;var vertPad=paddings.top+paddings.bottom;// Computed styles of width & height are being used because they are the\n// only dimensions available to JS that contain non-rounded values. It could\n// be possible to utilize the getBoundingClientRect if only it's data wasn't\n// affected by CSS transformations let alone paddings, borders and scroll bars.\nvar width=toFloat(styles.width),height=toFloat(styles.height);// Width & height include paddings and borders when the 'border-box' box\n// model is applied (except for IE).\nif(styles.boxSizing==='border-box'){// Following conditions are required to handle Internet Explorer which\n// doesn't include paddings and borders to computed CSS dimensions.\n//\n// We can say that if CSS dimensions + paddings are equal to the \"client\"\n// properties then it's either IE, and thus we don't need to subtract\n// anything, or an element merely doesn't have paddings/borders styles.\nif(Math.round(width+horizPad)!==clientWidth){width-=getBordersSize(styles,'left','right')+horizPad;}if(Math.round(height+vertPad)!==clientHeight){height-=getBordersSize(styles,'top','bottom')+vertPad;}}// Following steps can't be applied to the document's root element as its\n// client[Width/Height] properties represent viewport area of the window.\n// Besides, it's as well not necessary as the <html> itself neither has\n// rendered scroll bars nor it can be clipped.\nif(!isDocumentElement(target)){// In some browsers (only in Firefox, actually) CSS width & height\n// include scroll bars size which can be removed at this step as scroll\n// bars are the only difference between rounded dimensions + paddings\n// and \"client\" properties, though that is not always true in Chrome.\nvar vertScrollbar=Math.round(width+horizPad)-clientWidth;var horizScrollbar=Math.round(height+vertPad)-clientHeight;// Chrome has a rather weird rounding of \"client\" properties.\n// E.g. for an element with content width of 314.2px it sometimes gives\n// the client width of 315px and for the width of 314.7px it may give\n// 314px. And it doesn't happen all the time. So just ignore this delta\n// as a non-relevant.\nif(Math.abs(vertScrollbar)!==1){width-=vertScrollbar;}if(Math.abs(horizScrollbar)!==1){height-=horizScrollbar;}}return createRectInit(paddings.left,paddings.top,width,height);}/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */var isSVGGraphicsElement=function(){// Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n// interface.\nif(typeof SVGGraphicsElement!=='undefined'){return function(target){return target instanceof getWindowOf(target).SVGGraphicsElement;};}// If it's so, then check that element is at least an instance of the\n// SVGElement and that it has the \"getBBox\" method.\n// eslint-disable-next-line no-extra-parens\nreturn function(target){return target instanceof getWindowOf(target).SVGElement&&typeof target.getBBox==='function';};}();/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */function isDocumentElement(target){return target===getWindowOf(target).document.documentElement;}/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */function getContentRect(target){if(!isBrowser){return emptyRect;}if(isSVGGraphicsElement(target)){return getSVGContentRect(target);}return getHTMLElementContentRect(target);}/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */function createReadOnlyRect(_a){var x=_a.x,y=_a.y,width=_a.width,height=_a.height;// If DOMRectReadOnly is available use it as a prototype for the rectangle.\nvar Constr=typeof DOMRectReadOnly!=='undefined'?DOMRectReadOnly:Object;var rect=Object.create(Constr.prototype);// Rectangle's properties are not writable and non-enumerable.\ndefineConfigurable(rect,{x:x,y:y,width:width,height:height,top:y,right:x+width,bottom:height+y,left:x});return rect;}/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */function createRectInit(x,y,width,height){return{x:x,y:y,width:width,height:height};}/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */var ResizeObservation=/** @class */function(){/**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */function ResizeObservation(target){/**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */this.broadcastWidth=0;/**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */this.broadcastHeight=0;/**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */this.contentRect_=createRectInit(0,0,0,0);this.target=target;}/**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */ResizeObservation.prototype.isActive=function(){var rect=getContentRect(this.target);this.contentRect_=rect;return rect.width!==this.broadcastWidth||rect.height!==this.broadcastHeight;};/**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */ResizeObservation.prototype.broadcastRect=function(){var rect=this.contentRect_;this.broadcastWidth=rect.width;this.broadcastHeight=rect.height;return rect;};return ResizeObservation;}();var ResizeObserverEntry=/** @class */function(){/**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */function ResizeObserverEntry(target,rectInit){var contentRect=createReadOnlyRect(rectInit);// According to the specification following properties are not writable\n// and are also not enumerable in the native implementation.\n//\n// Property accessors are not being used as they'd require to define a\n// private WeakMap storage which may cause memory leaks in browsers that\n// don't support this type of collections.\ndefineConfigurable(this,{target:target,contentRect:contentRect});}return ResizeObserverEntry;}();var ResizeObserverSPI=/** @class */function(){/**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */function ResizeObserverSPI(callback,controller,callbackCtx){/**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */this.activeObservations_=[];/**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */this.observations_=new MapShim();if(typeof callback!=='function'){throw new TypeError('The callback provided as parameter 1 is not a function.');}this.callback_=callback;this.controller_=controller;this.callbackCtx_=callbackCtx;}/**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */ResizeObserverSPI.prototype.observe=function(target){if(!arguments.length){throw new TypeError('1 argument required, but only 0 present.');}// Do nothing if current environment doesn't have the Element interface.\nif(typeof Element==='undefined'||!(Element instanceof Object)){return;}if(!(target instanceof getWindowOf(target).Element)){throw new TypeError('parameter 1 is not of type \"Element\".');}var observations=this.observations_;// Do nothing if element is already being observed.\nif(observations.has(target)){return;}observations.set(target,new ResizeObservation(target));this.controller_.addObserver(this);// Force the update of observations.\nthis.controller_.refresh();};/**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */ResizeObserverSPI.prototype.unobserve=function(target){if(!arguments.length){throw new TypeError('1 argument required, but only 0 present.');}// Do nothing if current environment doesn't have the Element interface.\nif(typeof Element==='undefined'||!(Element instanceof Object)){return;}if(!(target instanceof getWindowOf(target).Element)){throw new TypeError('parameter 1 is not of type \"Element\".');}var observations=this.observations_;// Do nothing if element is not being observed.\nif(!observations.has(target)){return;}observations.delete(target);if(!observations.size){this.controller_.removeObserver(this);}};/**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */ResizeObserverSPI.prototype.disconnect=function(){this.clearActive();this.observations_.clear();this.controller_.removeObserver(this);};/**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */ResizeObserverSPI.prototype.gatherActive=function(){var _this=this;this.clearActive();this.observations_.forEach(function(observation){if(observation.isActive()){_this.activeObservations_.push(observation);}});};/**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */ResizeObserverSPI.prototype.broadcastActive=function(){// Do nothing if observer doesn't have active observations.\nif(!this.hasActive()){return;}var ctx=this.callbackCtx_;// Create ResizeObserverEntry instance for every active observation.\nvar entries=this.activeObservations_.map(function(observation){return new ResizeObserverEntry(observation.target,observation.broadcastRect());});this.callback_.call(ctx,entries,ctx);this.clearActive();};/**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */ResizeObserverSPI.prototype.clearActive=function(){this.activeObservations_.splice(0);};/**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */ResizeObserverSPI.prototype.hasActive=function(){return this.activeObservations_.length>0;};return ResizeObserverSPI;}();// Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\nvar observers=typeof WeakMap!=='undefined'?new WeakMap():new MapShim();/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */var ResizeObserver=/** @class */function(){/**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */function ResizeObserver(callback){if(!(this instanceof ResizeObserver)){throw new TypeError('Cannot call a class as a function.');}if(!arguments.length){throw new TypeError('1 argument required, but only 0 present.');}var controller=ResizeObserverController.getInstance();var observer=new ResizeObserverSPI(callback,controller,this);observers.set(this,observer);}return ResizeObserver;}();// Expose public methods of ResizeObserver.\n['observe','unobserve','disconnect'].forEach(function(method){ResizeObserver.prototype[method]=function(){var _a;return(_a=observers.get(this))[method].apply(_a,arguments);};});var index=function(){// Export existing implementation if available.\nif(typeof global$1.ResizeObserver!=='undefined'){return global$1.ResizeObserver;}return ResizeObserver;}();/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\n");

/***/ }),

/***/ "./packages/mars-theme/src/components/gallery.js":
/*!*******************************************************!*\
  !*** ./packages/mars-theme/src/components/gallery.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_styled__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/styled */ \"./node_modules/@emotion/styled/dist/styled.browser.esm.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _footer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./footer */ \"./packages/mars-theme/src/components/footer.js\");\n/* harmony import */ var react_image_gallery__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-image-gallery */ \"./node_modules/react-image-gallery/build/image-gallery.js\");\n/* harmony import */ var react_image_gallery__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_image_gallery__WEBPACK_IMPORTED_MODULE_5__);\nfunction Gallery(_ref){var{state,actions}=_ref;//useEffect(() => {\n//actions.source.fetch(\"/home-post\", { force: true });\n//}, []);\n//const data = state.source.get(\"/home-post/\");\n//   if (data.isPost) {\n//     const category = state.source.post[data.id];\n//     const firstHeader = category.content.rendered;\nvar images=[{original:\"https://picsum.photos/id/1018/1000/600/\",thumbnail:\"https://picsum.photos/id/1018/250/150/\"},{original:\"https://picsum.photos/id/1015/1000/600/\",thumbnail:\"https://picsum.photos/id/1015/250/150/\"},{original:\"https://picsum.photos/id/1019/1000/600/\",thumbnail:\"https://picsum.photos/id/1019/250/150/\"}];return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"main\",{style:{width:\"100%\",boxShadow:\"inset 0 8px 8px -6px rgba(0, 0, 0, 0.5)\"}},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Gallery\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_footer__WEBPACK_IMPORTED_MODULE_4__[\"default\"],null));}// Connect the Item to gain access to `state` as a prop\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Gallery));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL2dhbGxlcnkuanM/ZDA2YyJdLCJuYW1lcyI6WyJHYWxsZXJ5Iiwic3RhdGUiLCJhY3Rpb25zIiwiaW1hZ2VzIiwib3JpZ2luYWwiLCJ0aHVtYm5haWwiLCJ3aWR0aCIsImJveFNoYWRvdyIsImNvbm5lY3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBS0EsUUFBU0EsUUFBVCxNQUFxQyxJQUFwQixDQUFFQyxLQUFGLENBQVNDLE9BQVQsQ0FBb0IsTUFDbkM7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQSxHQUFNQyxPQUFNLENBQUcsQ0FDYixDQUNFQyxRQUFRLENBQUUseUNBRFosQ0FFRUMsU0FBUyxDQUFFLHdDQUZiLENBRGEsQ0FLYixDQUNFRCxRQUFRLENBQUUseUNBRFosQ0FFRUMsU0FBUyxDQUFFLHdDQUZiLENBTGEsQ0FTYixDQUNFRCxRQUFRLENBQUUseUNBRFosQ0FFRUMsU0FBUyxDQUFFLHdDQUZiLENBVGEsQ0FBZixDQWVBLE1BQ0UsbUVBQ0UsS0FBSyxDQUFFLENBQ0xDLEtBQUssQ0FBRSxNQURGLENBR0xDLFNBQVMsQ0FBRSx5Q0FITixDQURULEVBT0UsOEVBUEYsQ0FRRSwwREFBQywrQ0FBRCxNQVJGLENBREYsQ0FZRCxDQUVEO0FBQ2VDLHVIQUFPLENBQUNSLE9BQUQsQ0FBdEIiLCJmaWxlIjoiLi9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL2dhbGxlcnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBzdHlsZWQsIGNvbm5lY3QsIEdsb2JhbCwgZGVjb2RlIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XHJcbmltcG9ydCBJbWFnZUdhbGxlcnkgZnJvbSBcInJlYWN0LWltYWdlLWdhbGxlcnlcIjtcclxuXHJcbmZ1bmN0aW9uIEdhbGxlcnkoeyBzdGF0ZSwgYWN0aW9ucyB9KSB7XHJcbiAgLy91c2VFZmZlY3QoKCkgPT4ge1xyXG4gIC8vYWN0aW9ucy5zb3VyY2UuZmV0Y2goXCIvaG9tZS1wb3N0XCIsIHsgZm9yY2U6IHRydWUgfSk7XHJcbiAgLy99LCBbXSk7XHJcblxyXG4gIC8vY29uc3QgZGF0YSA9IHN0YXRlLnNvdXJjZS5nZXQoXCIvaG9tZS1wb3N0L1wiKTtcclxuXHJcbiAgLy8gICBpZiAoZGF0YS5pc1Bvc3QpIHtcclxuICAvLyAgICAgY29uc3QgY2F0ZWdvcnkgPSBzdGF0ZS5zb3VyY2UucG9zdFtkYXRhLmlkXTtcclxuICAvLyAgICAgY29uc3QgZmlyc3RIZWFkZXIgPSBjYXRlZ29yeS5jb250ZW50LnJlbmRlcmVkO1xyXG5cclxuICBjb25zdCBpbWFnZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIG9yaWdpbmFsOiBcImh0dHBzOi8vcGljc3VtLnBob3Rvcy9pZC8xMDE4LzEwMDAvNjAwL1wiLFxyXG4gICAgICB0aHVtYm5haWw6IFwiaHR0cHM6Ly9waWNzdW0ucGhvdG9zL2lkLzEwMTgvMjUwLzE1MC9cIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG9yaWdpbmFsOiBcImh0dHBzOi8vcGljc3VtLnBob3Rvcy9pZC8xMDE1LzEwMDAvNjAwL1wiLFxyXG4gICAgICB0aHVtYm5haWw6IFwiaHR0cHM6Ly9waWNzdW0ucGhvdG9zL2lkLzEwMTUvMjUwLzE1MC9cIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG9yaWdpbmFsOiBcImh0dHBzOi8vcGljc3VtLnBob3Rvcy9pZC8xMDE5LzEwMDAvNjAwL1wiLFxyXG4gICAgICB0aHVtYm5haWw6IFwiaHR0cHM6Ly9waWNzdW0ucGhvdG9zL2lkLzEwMTkvMjUwLzE1MC9cIixcclxuICAgIH0sXHJcbiAgXTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxtYWluXHJcbiAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxyXG5cclxuICAgICAgICBib3hTaGFkb3c6IFwiaW5zZXQgMCA4cHggOHB4IC02cHggcmdiYSgwLCAwLCAwLCAwLjUpXCIsXHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAgICAgIDxoMT5HYWxsZXJ5PC9oMT5cclxuICAgICAgPEZvb3RlciAvPlxyXG4gICAgPC9tYWluPlxyXG4gICk7XHJcbn1cclxuXHJcbi8vIENvbm5lY3QgdGhlIEl0ZW0gdG8gZ2FpbiBhY2Nlc3MgdG8gYHN0YXRlYCBhcyBhIHByb3BcclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChHYWxsZXJ5KTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/gallery.js\n");

/***/ })

})